
Marbex_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000002c  20000000  08002a5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001574  20000030  08002a88  00020030  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  200015a4  08002a88  000215a4  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00006525  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000016f7  00000000  00000000  0002657f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000900  00000000  00000000  00027c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f8  00000000  00000000  00028578  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000391d  00000000  00000000  00028d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030b4  00000000  00000000  0002c68d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007e  00000000  00000000  0002f741  2**0
                  CONTENTS, READONLY
 15 .debug_frame  000023b8  00000000  00000000  0002f7c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a3c 	.word	0x08002a3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08002a3c 	.word	0x08002a3c

080001c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001cc:	4a12      	ldr	r2, [pc, #72]	; (8000218 <SystemInit+0x50>)
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <SystemInit+0x50>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <SystemInit+0x50>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001de:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <SystemInit+0x50>)
 80001e0:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <SystemInit+0x50>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <SystemInit+0x50>)
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <SystemInit+0x54>)
 80001f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001f4:	4a08      	ldr	r2, [pc, #32]	; (8000218 <SystemInit+0x50>)
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <SystemInit+0x50>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80001fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SystemInit+0x50>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000206:	f000 f80d 	bl	8000224 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <SystemInit+0x58>)
 800020c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000210:	609a      	str	r2, [r3, #8]
#endif
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40023800 	.word	0x40023800
 800021c:	24003010 	.word	0x24003010
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	2300      	movs	r3, #0
 8000230:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000232:	4a36      	ldr	r2, [pc, #216]	; (800030c <SetSysClock+0xe8>)
 8000234:	4b35      	ldr	r3, [pc, #212]	; (800030c <SetSysClock+0xe8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800023c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800023e:	4b33      	ldr	r3, [pc, #204]	; (800030c <SetSysClock+0xe8>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000246:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d103      	bne.n	800025c <SetSysClock+0x38>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800025a:	d1f0      	bne.n	800023e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800025c:	4b2b      	ldr	r3, [pc, #172]	; (800030c <SetSysClock+0xe8>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000264:	2b00      	cmp	r3, #0
 8000266:	d002      	beq.n	800026e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000268:	2301      	movs	r3, #1
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	e001      	b.n	8000272 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800026e:	2300      	movs	r3, #0
 8000270:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d142      	bne.n	80002fe <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000278:	4a24      	ldr	r2, [pc, #144]	; (800030c <SetSysClock+0xe8>)
 800027a:	4b24      	ldr	r3, [pc, #144]	; (800030c <SetSysClock+0xe8>)
 800027c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800027e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000282:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000284:	4a22      	ldr	r2, [pc, #136]	; (8000310 <SetSysClock+0xec>)
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <SetSysClock+0xec>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800028e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000290:	4a1e      	ldr	r2, [pc, #120]	; (800030c <SetSysClock+0xe8>)
 8000292:	4b1e      	ldr	r3, [pc, #120]	; (800030c <SetSysClock+0xe8>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000298:	4a1c      	ldr	r2, [pc, #112]	; (800030c <SetSysClock+0xe8>)
 800029a:	4b1c      	ldr	r3, [pc, #112]	; (800030c <SetSysClock+0xe8>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002a2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002a4:	4a19      	ldr	r2, [pc, #100]	; (800030c <SetSysClock+0xe8>)
 80002a6:	4b19      	ldr	r3, [pc, #100]	; (800030c <SetSysClock+0xe8>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002ae:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <SetSysClock+0xe8>)
 80002b2:	4a18      	ldr	r2, [pc, #96]	; (8000314 <SetSysClock+0xf0>)
 80002b4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002b6:	4a15      	ldr	r2, [pc, #84]	; (800030c <SetSysClock+0xe8>)
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <SetSysClock+0xe8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002c0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002c2:	bf00      	nop
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <SetSysClock+0xe8>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <SetSysClock+0xf4>)
 80002d2:	f240 6205 	movw	r2, #1541	; 0x605
 80002d6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002d8:	4a0c      	ldr	r2, [pc, #48]	; (800030c <SetSysClock+0xe8>)
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <SetSysClock+0xe8>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	f023 0303 	bic.w	r3, r3, #3
 80002e2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002e4:	4a09      	ldr	r2, [pc, #36]	; (800030c <SetSysClock+0xe8>)
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <SetSysClock+0xe8>)
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	f043 0302 	orr.w	r3, r3, #2
 80002ee:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80002f0:	bf00      	nop
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <SetSysClock+0xe8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 030c 	and.w	r3, r3, #12
 80002fa:	2b08      	cmp	r3, #8
 80002fc:	d1f9      	bne.n	80002f2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	40007000 	.word	0x40007000
 8000314:	0740690a 	.word	0x0740690a
 8000318:	40023c00 	.word	0x40023c00

0800031c <USART2_IRQHandler>:
/******************************************************************************/
// ----------------------------------------------------------------------------

uint16_t uart2_cnt = 0;

void USART2_IRQHandler( void ) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	++uart2_cnt;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <USART2_IRQHandler+0x1c>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	3301      	adds	r3, #1
 8000326:	b29a      	uxth	r2, r3
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <USART2_IRQHandler+0x1c>)
 800032a:	801a      	strh	r2, [r3, #0]
	USART_ClearFlag( USART2, USART_FLAG_TC );
 800032c:	2140      	movs	r1, #64	; 0x40
 800032e:	4803      	ldr	r0, [pc, #12]	; (800033c <USART2_IRQHandler+0x20>)
 8000330:	f001 ffd8 	bl	80022e4 <USART_ClearFlag>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000004c 	.word	0x2000004c
 800033c:	40004400 	.word	0x40004400

08000340 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000354:	e7fe      	b.n	8000354 <HardFault_Handler+0x4>
 8000356:	bf00      	nop

08000358 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800035c:	e7fe      	b.n	800035c <MemManage_Handler+0x4>
 800035e:	bf00      	nop

08000360 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000364:	e7fe      	b.n	8000364 <BusFault_Handler+0x4>
 8000366:	bf00      	nop

08000368 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800036c:	e7fe      	b.n	800036c <UsageFault_Handler+0x4>
 800036e:	bf00      	nop

08000370 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000380:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000382:	e003      	b.n	800038c <LoopCopyDataInit>

08000384 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <LoopFillZerobss+0x20>)
  ldr  r3, [r3, r1]
 8000386:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000388:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800038a:	3104      	adds	r1, #4

0800038c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopFillZerobss+0x24>)
  ldr  r3, =_edata
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <LoopFillZerobss+0x28>)
  adds  r2, r0, r1
 8000390:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000392:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000394:	d3f6      	bcc.n	8000384 <CopyDataInit>
  ldr  r2, =_sbss
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopFillZerobss+0x2c>)
  b  LoopFillZerobss
 8000398:	e002      	b.n	80003a0 <LoopFillZerobss>

0800039a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800039a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800039c:	f842 3b04 	str.w	r3, [r2], #4

080003a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <LoopFillZerobss+0x30>)
  cmp  r2, r3
 80003a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003a4:	d3f9      	bcc.n	800039a <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 80003a6:	480b      	ldr	r0, [pc, #44]	; (80003d4 <LoopFillZerobss+0x34>)
 ldr     r1,[r0]
 80003a8:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 80003aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 80003ae:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003b0:	f7ff ff0a 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003b4:	f002 fac0 	bl	8002938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003b8:	f000 f81e 	bl	80003f8 <main>
  bx  lr    
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80003c0:	08002a5c 	.word	0x08002a5c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003c8:	2000002c 	.word	0x2000002c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80003cc:	20000030 	.word	0x20000030
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d0:	200015a4 	.word	0x200015a4
  cmp  r2, r3
  bcc  FillZerobss
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 80003d4:	e000ed88 	.word	0xe000ed88

080003d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>
	...

080003dc <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 80003e0:	2001      	movs	r0, #1
 80003e2:	f002 f94d 	bl	8002680 <EXTI_GetITStatus>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <EXTI0_IRQHandler+0x16>
	{
		/* Clear the EXTI line 0 pending bit */
		EXTI_ClearITPendingBit(EXTI_Line0);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f002 f96b 	bl	80026c8 <EXTI_ClearITPendingBit>
	}
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop

080003f8 <main>:

// ============================================================================
int main( void )
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af04      	add	r7, sp, #16

	/* Initializations */
	GPIO_Configuration(); // SET: PA4 - OUT; PA1, PA2, PA3 - IN;
 80003fe:	f000 f931 	bl	8000664 <GPIO_Configuration>

	/* Create Tasks */
	xTaskCreate( vLEDTask, ( signed char * ) "LED Task", LED_STACK_SIZE, NULL, LED_TASK_PRIORITY, NULL );
 8000402:	2300      	movs	r3, #0
 8000404:	9303      	str	r3, [sp, #12]
 8000406:	2300      	movs	r3, #0
 8000408:	9302      	str	r3, [sp, #8]
 800040a:	2300      	movs	r3, #0
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	2301      	movs	r3, #1
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2300      	movs	r3, #0
 8000414:	2280      	movs	r2, #128	; 0x80
 8000416:	4918      	ldr	r1, [pc, #96]	; (8000478 <main+0x80>)
 8000418:	4818      	ldr	r0, [pc, #96]	; (800047c <main+0x84>)
 800041a:	f000 fc03 	bl	8000c24 <xTaskGenericCreate>
	xTaskCreate( vButtonTask, ( signed char * ) "LED Task", BUTTON_STACK_SIZE, NULL, BUTTON_TASK_PRIORITY, NULL );
 800041e:	2300      	movs	r3, #0
 8000420:	9303      	str	r3, [sp, #12]
 8000422:	2300      	movs	r3, #0
 8000424:	9302      	str	r3, [sp, #8]
 8000426:	2300      	movs	r3, #0
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	2302      	movs	r3, #2
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2300      	movs	r3, #0
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	4911      	ldr	r1, [pc, #68]	; (8000478 <main+0x80>)
 8000434:	4812      	ldr	r0, [pc, #72]	; (8000480 <main+0x88>)
 8000436:	f000 fbf5 	bl	8000c24 <xTaskGenericCreate>
	xTaskCreate( vRowReadTask, ( signed char * ) "Read Row Task", MIN_STACK_SIZE, NULL, 3, NULL);
 800043a:	2300      	movs	r3, #0
 800043c:	9303      	str	r3, [sp, #12]
 800043e:	2300      	movs	r3, #0
 8000440:	9302      	str	r3, [sp, #8]
 8000442:	2300      	movs	r3, #0
 8000444:	9301      	str	r3, [sp, #4]
 8000446:	2303      	movs	r3, #3
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2300      	movs	r3, #0
 800044c:	2282      	movs	r2, #130	; 0x82
 800044e:	490d      	ldr	r1, [pc, #52]	; (8000484 <main+0x8c>)
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <main+0x90>)
 8000452:	f000 fbe7 	bl	8000c24 <xTaskGenericCreate>
	xTaskCreate( vLineHighTask, ( signed char * ) "Line High Task", MIN_STACK_SIZE, NULL, 4, NULL);
 8000456:	2300      	movs	r3, #0
 8000458:	9303      	str	r3, [sp, #12]
 800045a:	2300      	movs	r3, #0
 800045c:	9302      	str	r3, [sp, #8]
 800045e:	2300      	movs	r3, #0
 8000460:	9301      	str	r3, [sp, #4]
 8000462:	2304      	movs	r3, #4
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	2300      	movs	r3, #0
 8000468:	2282      	movs	r2, #130	; 0x82
 800046a:	4908      	ldr	r1, [pc, #32]	; (800048c <main+0x94>)
 800046c:	4808      	ldr	r0, [pc, #32]	; (8000490 <main+0x98>)
 800046e:	f000 fbd9 	bl	8000c24 <xTaskGenericCreate>
	vTaskStartScheduler();
 8000472:	f000 fcc7 	bl	8000e04 <vTaskStartScheduler>

    // Will only get here if there was insufficient memory to create
    // the idle task.
    for( ;; );  
 8000476:	e7fe      	b.n	8000476 <main+0x7e>
 8000478:	080029d0 	.word	0x080029d0
 800047c:	08000495 	.word	0x08000495
 8000480:	080004d1 	.word	0x080004d1
 8000484:	080029dc 	.word	0x080029dc
 8000488:	08000511 	.word	0x08000511
 800048c:	080029ec 	.word	0x080029ec
 8000490:	08000611 	.word	0x08000611

08000494 <vLEDTask>:

/*
 * LED Toggle Task
 */
static void vLEDTask( void *pvparameters )
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	uint32_t LEDdelay = 1000; /* Delay in ticks */
 800049c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a0:	60fb      	str	r3, [r7, #12]

	STM_EVAL_LEDInit(LED4);
 80004a2:	2000      	movs	r0, #0
 80004a4:	f002 f920 	bl	80026e8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDOff(LED4);
 80004a8:	2000      	movs	r0, #0
 80004aa:	f002 f94b 	bl	8002744 <STM_EVAL_LEDOff>
	STM_EVAL_LEDInit(LED5);
 80004ae:	2002      	movs	r0, #2
 80004b0:	f002 f91a 	bl	80026e8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDOff(LED5);
 80004b4:	2002      	movs	r0, #2
 80004b6:	f002 f945 	bl	8002744 <STM_EVAL_LEDOff>

	for(;;)
	{
		STM_EVAL_LEDToggle(LED4);
 80004ba:	2000      	movs	r0, #0
 80004bc:	f002 f95a 	bl	8002774 <STM_EVAL_LEDToggle>
		STM_EVAL_LEDToggle(LED5);
 80004c0:	2002      	movs	r0, #2
 80004c2:	f002 f957 	bl	8002774 <STM_EVAL_LEDToggle>

		vTaskDelay(configTICK_RATE_HZ*1);
 80004c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ca:	f000 fc71 	bl	8000db0 <vTaskDelay>
	}
 80004ce:	e7f4      	b.n	80004ba <vLEDTask+0x26>

080004d0 <vButtonTask>:

/*
 * Button Task
 */
static void vButtonTask( void *pvparameters )
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	STM_EVAL_PBInit(BUTTON_USER,BUTTON_MODE_GPIO);//initialize the push button
 80004d8:	2100      	movs	r1, #0
 80004da:	2000      	movs	r0, #0
 80004dc:	f002 f968 	bl	80027b0 <STM_EVAL_PBInit>
	STM_EVAL_LEDInit(LED6);
 80004e0:	2003      	movs	r0, #3
 80004e2:	f002 f901 	bl	80026e8 <STM_EVAL_LEDInit>
	STM_EVAL_LEDOff(LED6);
 80004e6:	2003      	movs	r0, #3
 80004e8:	f002 f92c 	bl	8002744 <STM_EVAL_LEDOff>
	// See if user button pressed
	for(;;){
		if(STM_EVAL_PBGetState(BUTTON_USER)==Bit_SET){
 80004ec:	2000      	movs	r0, #0
 80004ee:	f002 f9ab 	bl	8002848 <STM_EVAL_PBGetState>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d105      	bne.n	8000504 <vButtonTask+0x34>
			delay_ms(10);
 80004f8:	200a      	movs	r0, #10
 80004fa:	f000 f903 	bl	8000704 <delay_ms>
			STM_EVAL_LEDToggle(LED6);
 80004fe:	2003      	movs	r0, #3
 8000500:	f002 f938 	bl	8002774 <STM_EVAL_LEDToggle>
		}
		vTaskDelay(configTICK_RATE_HZ*1);
 8000504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000508:	f000 fc52 	bl	8000db0 <vTaskDelay>
	}
 800050c:	e7ee      	b.n	80004ec <vButtonTask+0x1c>
 800050e:	bf00      	nop

08000510 <vRowReadTask>:

/*
 * Row Read Task
 */
static void vRowReadTask( void *pvparameters )
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint8_t value3;

	for(;;)
	{
		// SET ENABLE BITS, maybe do this in wiring?
		if(counter & 00000001){
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <vRowReadTask+0xd0>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	f003 0301 	and.w	r3, r3, #1
 8000520:	2b00      	cmp	r3, #0
 8000522:	d003      	beq.n	800052c <vRowReadTask+0x1c>
			// SET PIN 0 HIGH FOR ALL MUX
			GPIO_SetBits(GPIOA, GPIO_Pin_1);
 8000524:	2102      	movs	r1, #2
 8000526:	482f      	ldr	r0, [pc, #188]	; (80005e4 <vRowReadTask+0xd4>)
 8000528:	f002 f818 	bl	800255c <GPIO_SetBits>
			//GPIO_SetBits(GPIOB, GPIO_Pin_1);
			//GPIO_SetBits(GPIOC, GPIO_Pin_1);
			//GPIO_SetBits(GPIOD, GPIO_Pin_1);
		}
		if(counter & 00000010){
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <vRowReadTask+0xd0>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	2b00      	cmp	r3, #0
 8000536:	d003      	beq.n	8000540 <vRowReadTask+0x30>
			// SET PIN 1 HIGH FOR ALL MUX
			GPIO_SetBits(GPIOA, GPIO_Pin_2);
 8000538:	2104      	movs	r1, #4
 800053a:	482a      	ldr	r0, [pc, #168]	; (80005e4 <vRowReadTask+0xd4>)
 800053c:	f002 f80e 	bl	800255c <GPIO_SetBits>
			//GPIO_SetBits(GPIOB, GPIO_Pin_2);
			//GPIO_SetBits(GPIOC, GPIO_Pin_2);
			//GPIO_SetBits(GPIOD, GPIO_Pin_2);
		}
		if(counter & 00000001){
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <vRowReadTask+0xd0>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	2b00      	cmp	r3, #0
 800054a:	d003      	beq.n	8000554 <vRowReadTask+0x44>
			// SET PIN 2 HIGH FOR ALL MUX
			GPIO_SetBits(GPIOA, GPIO_Pin_3);
 800054c:	2108      	movs	r1, #8
 800054e:	4825      	ldr	r0, [pc, #148]	; (80005e4 <vRowReadTask+0xd4>)
 8000550:	f002 f804 	bl	800255c <GPIO_SetBits>
			//GPIO_SetBits(GPIOB, GPIO_Pin_3);
			//GPIO_SetBits(GPIOC, GPIO_Pin_3);
			//GPIO_SetBits(GPIOD, GPIO_Pin_3);
		}
		delay_ms(10);
 8000554:	200a      	movs	r0, #10
 8000556:	f000 f8d5 	bl	8000704 <delay_ms>
		// READ INPUT FOR ALL MUX

		value0 = GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0);
 800055a:	2101      	movs	r1, #1
 800055c:	4821      	ldr	r0, [pc, #132]	; (80005e4 <vRowReadTask+0xd4>)
 800055e:	f001 ffe3 	bl	8002528 <GPIO_ReadInputDataBit>
 8000562:	4603      	mov	r3, r0
 8000564:	73fb      	strb	r3, [r7, #15]
		value1 = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_0);
 8000566:	2101      	movs	r1, #1
 8000568:	481f      	ldr	r0, [pc, #124]	; (80005e8 <vRowReadTask+0xd8>)
 800056a:	f001 ffdd 	bl	8002528 <GPIO_ReadInputDataBit>
 800056e:	4603      	mov	r3, r0
 8000570:	73bb      	strb	r3, [r7, #14]
		value2 = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_0);
 8000572:	2101      	movs	r1, #1
 8000574:	481d      	ldr	r0, [pc, #116]	; (80005ec <vRowReadTask+0xdc>)
 8000576:	f001 ffd7 	bl	8002528 <GPIO_ReadInputDataBit>
 800057a:	4603      	mov	r3, r0
 800057c:	737b      	strb	r3, [r7, #13]
		value3 = GPIO_ReadInputDataBit(GPIOD, GPIO_Pin_0);
 800057e:	2101      	movs	r1, #1
 8000580:	481b      	ldr	r0, [pc, #108]	; (80005f0 <vRowReadTask+0xe0>)
 8000582:	f001 ffd1 	bl	8002528 <GPIO_ReadInputDataBit>
 8000586:	4603      	mov	r3, r0
 8000588:	733b      	strb	r3, [r7, #12]

		// READ HIGH ??
		value0 = value0 & 00000001;
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
		value1 = value1 & 00000001;
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	73bb      	strb	r3, [r7, #14]
		value2 = value2 & 00000001;
 800059a:	7b7b      	ldrb	r3, [r7, #13]
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	737b      	strb	r3, [r7, #13]
		value3 = value3 & 00000001;
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	733b      	strb	r3, [r7, #12]

		// WILL THIS WORK?
		uint8_t output = value0 + (value1 << 1) + (value2 << 2) + (value3 << 3);
 80005aa:	7bbb      	ldrb	r3, [r7, #14]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	4413      	add	r3, r2
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	7b7b      	ldrb	r3, [r7, #13]
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	4413      	add	r3, r2
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	7b3b      	ldrb	r3, [r7, #12]
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4413      	add	r3, r2
 80005c8:	72fb      	strb	r3, [r7, #11]
		//THIS IS WHERE TO SEND TO CORRESPONDING SOUND OUTPUT
		PlaySound(output);
 80005ca:	7afb      	ldrb	r3, [r7, #11]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f813 	bl	80005f8 <PlaySound>
		vTaskDelay(frequency);
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <vRowReadTask+0xe4>)
 80005d4:	cb18      	ldmia	r3, {r3, r4}
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fbea 	bl	8000db0 <vTaskDelay>
	}
 80005dc:	e79c      	b.n	8000518 <vRowReadTask+0x8>
 80005de:	bf00      	nop
 80005e0:	20000060 	.word	0x20000060
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40020400 	.word	0x40020400
 80005ec:	40020800 	.word	0x40020800
 80005f0:	40020c00 	.word	0x40020c00
 80005f4:	20000008 	.word	0x20000008

080005f8 <PlaySound>:
}

void PlaySound(uint8_t output){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <vLineHighTask>:

/*
 * Line High Task
 */
static void vLineHighTask( void *pvparameters )
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		GPIO_SetBits(GPIOA, GPIO_Pin_4);
 8000618:	2110      	movs	r1, #16
 800061a:	480f      	ldr	r0, [pc, #60]	; (8000658 <vLineHighTask+0x48>)
 800061c:	f001 ff9e 	bl	800255c <GPIO_SetBits>
		delay_ms(10);
 8000620:	200a      	movs	r0, #10
 8000622:	f000 f86f 	bl	8000704 <delay_ms>
		GPIO_ResetBits(GPIOA, GPIO_Pin_4);
 8000626:	2110      	movs	r1, #16
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <vLineHighTask+0x48>)
 800062a:	f001 ffa7 	bl	800257c <GPIO_ResetBits>
		if(counter == 7){
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <vLineHighTask+0x4c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b07      	cmp	r3, #7
 8000634:	d103      	bne.n	800063e <vLineHighTask+0x2e>
			counter = 0;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <vLineHighTask+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e005      	b.n	800064a <vLineHighTask+0x3a>
		}else{
			counter++;
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <vLineHighTask+0x4c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <vLineHighTask+0x4c>)
 8000648:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(frequency);
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <vLineHighTask+0x50>)
 800064c:	cb18      	ldmia	r3, {r3, r4}
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fbae 	bl	8000db0 <vTaskDelay>
	}
 8000654:	e7e0      	b.n	8000618 <vLineHighTask+0x8>
 8000656:	bf00      	nop
 8000658:	40020000 	.word	0x40020000
 800065c:	20000060 	.word	0x20000060
 8000660:	20000008 	.word	0x20000008

08000664 <GPIO_Configuration>:
  * @brief  Configures the different GPIO ports.
  * @param  None
  * @retval : None
  */
void GPIO_Configuration(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Pack the struct */
	GPIO_InitStruct.GPIO_Speed = GPIO_Mode_OUT;
 800066a:	2301      	movs	r3, #1
 800066c:	737b      	strb	r3, [r7, #13]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_4;
 800066e:	2310      	movs	r3, #16
 8000670:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000672:	2302      	movs	r3, #2
 8000674:	737b      	strb	r3, [r7, #13]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000676:	2300      	movs	r3, #0
 8000678:	73bb      	strb	r3, [r7, #14]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]

	/* Call Init function */
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4619      	mov	r1, r3
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <GPIO_Configuration+0x4c>)
 8000686:	f001 fec1 	bl	800240c <GPIO_Init>

	GPIO_InitTypeDef GPIO_InitStruct2;

	/* Pack the struct */
	GPIO_InitStruct2.GPIO_Mode = GPIO_Mode_IN;
 800068a:	2300      	movs	r3, #0
 800068c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct2.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 800068e:	230e      	movs	r3, #14
 8000690:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct2.GPIO_Speed = GPIO_Speed_50MHz;
 8000692:	2302      	movs	r3, #2
 8000694:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct2.GPIO_OType = GPIO_OType_PP;
 8000696:	2300      	movs	r3, #0
 8000698:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct2.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	71fb      	strb	r3, [r7, #7]

	/* Call Init function */
	GPIO_Init(GPIOA, &GPIO_InitStruct2);
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <GPIO_Configuration+0x4c>)
 80006a4:	f001 feb2 	bl	800240c <GPIO_Init>
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40020000 	.word	0x40020000

080006b4 <vApplicationTickHook>:

// This FreeRTOS callback function gets called once per tick (default = 1000Hz).
// ---------------------------------------------------------------------------- 
void vApplicationTickHook( void ) {
 80006b4:	b490      	push	{r4, r7}
 80006b6:	af00      	add	r7, sp, #0
    ++tickTime;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <vApplicationTickHook+0x1c>)
 80006ba:	cb18      	ldmia	r3, {r3, r4}
 80006bc:	3301      	adds	r3, #1
 80006be:	f144 0400 	adc.w	r4, r4, #0
 80006c2:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <vApplicationTickHook+0x1c>)
 80006c4:	e882 0018 	stmia.w	r2, {r3, r4}
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc90      	pop	{r4, r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000050 	.word	0x20000050

080006d4 <vApplicationIdleHook>:

// This FreeRTOS call-back function gets when no other task is ready to execute.
// On a completely unloaded system this is getting called at over 2.5MHz!
// ---------------------------------------------------------------------------- 
void vApplicationIdleHook( void ) {
 80006d4:	b490      	push	{r4, r7}
 80006d6:	af00      	add	r7, sp, #0
    ++u64IdleTicksCnt;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <vApplicationIdleHook+0x1c>)
 80006da:	cb18      	ldmia	r3, {r3, r4}
 80006dc:	3301      	adds	r3, #1
 80006de:	f144 0400 	adc.w	r4, r4, #0
 80006e2:	4a03      	ldr	r2, [pc, #12]	; (80006f0 <vApplicationIdleHook+0x1c>)
 80006e4:	e882 0018 	stmia.w	r2, {r3, r4}
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc90      	pop	{r4, r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000058 	.word	0x20000058

080006f4 <vApplicationMallocFailedHook>:

// A required FreeRTOS function.
// ---------------------------------------------------------------------------- 
void vApplicationMallocFailedHook( void ) {
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
    configASSERT( 0 );  // Latch on any failure / error.
 80006f8:	f04f 0050 	mov.w	r0, #80	; 0x50
 80006fc:	f380 8811 	msr	BASEPRI, r0
 8000700:	e7fe      	b.n	8000700 <vApplicationMallocFailedHook+0xc>
 8000702:	bf00      	nop

08000704 <delay_ms>:
}

void delay_ms(uint32_t milli)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	uint32_t delay = milli * 17612;              // approximate loops per ms at 168 MHz, Debug config
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f244 42cc 	movw	r2, #17612	; 0x44cc
 8000712:	fb02 f303 	mul.w	r3, r2, r3
 8000716:	60fb      	str	r3, [r7, #12]
	for(; delay != 0; delay--);
 8000718:	e002      	b.n	8000720 <delay_ms+0x1c>
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3b01      	subs	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d1f9      	bne.n	800071a <delay_ms+0x16>
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800073e:	f000 fa47 	bl	8000bd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <xTimerCreateTimerTask+0x50>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00f      	beq.n	800076a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY, NULL);
 800074a:	2300      	movs	r3, #0
 800074c:	9303      	str	r3, [sp, #12]
 800074e:	2300      	movs	r3, #0
 8000750:	9302      	str	r3, [sp, #8]
 8000752:	2300      	movs	r3, #0
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	2302      	movs	r3, #2
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2300      	movs	r3, #0
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	4909      	ldr	r1, [pc, #36]	; (8000788 <xTimerCreateTimerTask+0x54>)
 8000762:	480a      	ldr	r0, [pc, #40]	; (800078c <xTimerCreateTimerTask+0x58>)
 8000764:	f000 fa5e 	bl	8000c24 <xTaskGenericCreate>
 8000768:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d104      	bne.n	800077a <xTimerCreateTimerTask+0x46>
 8000770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000774:	f380 8811 	msr	BASEPRI, r0
 8000778:	e7fe      	b.n	8000778 <xTimerCreateTimerTask+0x44>
	return xReturn;
 800077a:	687b      	ldr	r3, [r7, #4]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000094 	.word	0x20000094
 8000788:	080029fc 	.word	0x080029fc
 800078c:	08000885 	.word	0x08000885

08000790 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <xTimerGenericCommand+0x7c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d02a      	beq.n	8000800 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d118      	bne.n	80007ee <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80007bc:	f000 ff7e 	bl	80016bc <xTaskGetSchedulerState>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d109      	bne.n	80007da <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <xTimerGenericCommand+0x7c>)
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	f107 0110 	add.w	r1, r7, #16
 80007ce:	2300      	movs	r3, #0
 80007d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007d2:	f001 f895 	bl	8001900 <xQueueGenericSend>
 80007d6:	61f8      	str	r0, [r7, #28]
 80007d8:	e012      	b.n	8000800 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <xTimerGenericCommand+0x7c>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	f107 0110 	add.w	r1, r7, #16
 80007e2:	2300      	movs	r3, #0
 80007e4:	2200      	movs	r2, #0
 80007e6:	f001 f88b 	bl	8001900 <xQueueGenericSend>
 80007ea:	61f8      	str	r0, [r7, #28]
 80007ec:	e008      	b.n	8000800 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <xTimerGenericCommand+0x7c>)
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	f107 0110 	add.w	r1, r7, #16
 80007f6:	2300      	movs	r3, #0
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	f001 f91d 	bl	8001a38 <xQueueGenericSendFromISR>
 80007fe:	61f8      	str	r0, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
 8000800:	69fb      	ldr	r3, [r7, #28]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000094 	.word	0x20000094

08000810 <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af02      	add	r7, sp, #8
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <prvProcessExpiredTimer+0x70>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3304      	adds	r3, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fd33 	bl	8002294 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d11c      	bne.n	8000870 <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	699a      	ldr	r2, [r3, #24]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	18d1      	adds	r1, r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	683a      	ldr	r2, [r7, #0]
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	f000 f8ac 	bl	80009a0 <prvInsertTimerInActiveList>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d110      	bne.n	8000870 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 800084e:	2300      	movs	r3, #0
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	2100      	movs	r1, #0
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff ff99 	bl	8000790 <xTimerGenericCommand>
 800085e:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d104      	bne.n	8000870 <prvProcessExpiredTimer+0x60>
 8000866:	f04f 0050 	mov.w	r0, #80	; 0x50
 800086a:	f380 8811 	msr	BASEPRI, r0
 800086e:	e7fe      	b.n	800086e <prvProcessExpiredTimer+0x5e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	4798      	blx	r3
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000008c 	.word	0x2000008c

08000884 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f83f 	bl	8000914 <prvGetNextExpireTime>
 8000896:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	4619      	mov	r1, r3
 800089c:	68f8      	ldr	r0, [r7, #12]
 800089e:	f000 f803 	bl	80008a8 <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
 80008a2:	f000 f8bf 	bl	8000a24 <prvProcessReceivedCommands>
	}
 80008a6:	e7f1      	b.n	800088c <prvTimerTask+0x8>

080008a8 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 80008b2:	f000 fae3 	bl	8000e7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f84e 	bl	800095c <prvSampleTimeNow>
 80008c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d11d      	bne.n	8000904 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10a      	bne.n	80008e4 <prvProcessTimerOrBlockTask+0x3c>
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d806      	bhi.n	80008e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
 80008d6:	f000 fadf 	bl	8000e98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80008da:	68f9      	ldr	r1, [r7, #12]
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff97 	bl	8000810 <prvProcessExpiredTimer>
		else
		{
			xTaskResumeAll();
		}
	}
}
 80008e2:	e011      	b.n	8000908 <prvProcessTimerOrBlockTask+0x60>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <prvProcessTimerOrBlockTask+0x68>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	f001 face 	bl	8001e90 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 80008f4:	f000 fad0 	bl	8000e98 <xTaskResumeAll>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d104      	bne.n	8000908 <prvProcessTimerOrBlockTask+0x60>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 80008fe:	f001 fb9f 	bl	8002040 <vPortYieldFromISR>
		else
		{
			xTaskResumeAll();
		}
	}
}
 8000902:	e001      	b.n	8000908 <prvProcessTimerOrBlockTask+0x60>
				}
			}
		}
		else
		{
			xTaskResumeAll();
 8000904:	f000 fac8 	bl	8000e98 <xTaskResumeAll>
		}
	}
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000094 	.word	0x20000094

08000914 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <prvGetNextExpireTime+0x44>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d105      	bne.n	8000946 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <prvGetNextExpireTime+0x44>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	e001      	b.n	800094a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	2000008c 	.word	0x2000008c

0800095c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
 8000964:	f000 fb1c 	bl	8000fa0 <xTaskGetTickCount>
 8000968:	60f8      	str	r0, [r7, #12]
	
	if( xTimeNow < xLastTime )
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <prvSampleTimeNow+0x40>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	429a      	cmp	r2, r3
 8000972:	d208      	bcs.n	8000986 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <prvSampleTimeNow+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f000 f8cd 	bl	8000b18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	e002      	b.n	800098c <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
 800098c:	4a03      	ldr	r2, [pc, #12]	; (800099c <prvSampleTimeNow+0x40>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6013      	str	r3, [r2, #0]
	
	return xTimeNow;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000098 	.word	0x20000098

080009a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
 80009ac:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d812      	bhi.n	80009ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	1ad2      	subs	r2, r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d302      	bcc.n	80009da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e01b      	b.n	8000a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <prvInsertTimerInActiveList+0x7c>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3304      	adds	r3, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4610      	mov	r0, r2
 80009e6:	f001 fc1b 	bl	8002220 <vListInsert>
 80009ea:	e012      	b.n	8000a12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d206      	bcs.n	8000a02 <prvInsertTimerInActiveList+0x62>
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d302      	bcc.n	8000a02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80009fc:	2301      	movs	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	e007      	b.n	8000a12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <prvInsertTimerInActiveList+0x80>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	f001 fc07 	bl	8002220 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8000a12:	697b      	ldr	r3, [r7, #20]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000090 	.word	0x20000090
 8000a20:	2000008c 	.word	0x2000008c

08000a24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff95 	bl	800095c <prvSampleTimeNow>
 8000a32:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8000a34:	e05f      	b.n	8000af6 <prvProcessReceivedCommands+0xd2>
	{
		pxTimer = xMessage.pxTimer;
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d008      	beq.n	8000a52 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d004      	beq.n	8000a52 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fc21 	bl	8002294 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d84d      	bhi.n	8000af4 <prvProcessReceivedCommands+0xd0>
 8000a58:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <prvProcessReceivedCommands+0x3c>)
 8000a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5e:	bf00      	nop
 8000a60:	08000a71 	.word	0x08000a71
 8000a64:	08000af7 	.word	0x08000af7
 8000a68:	08000ac1 	.word	0x08000ac1
 8000a6c:	08000aed 	.word	0x08000aed
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	18d1      	adds	r1, r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	69b8      	ldr	r0, [r7, #24]
 8000a7e:	f7ff ff8f 	bl	80009a0 <prvInsertTimerInActiveList>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d136      	bne.n	8000af6 <prvProcessReceivedCommands+0xd2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8c:	69b8      	ldr	r0, [r7, #24]
 8000a8e:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	69db      	ldr	r3, [r3, #28]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d12e      	bne.n	8000af6 <prvProcessReceivedCommands+0xd2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	441a      	add	r2, r3
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	69b8      	ldr	r0, [r7, #24]
 8000aaa:	f7ff fe71 	bl	8000790 <xTimerGenericCommand>
 8000aae:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d11f      	bne.n	8000af6 <prvProcessReceivedCommands+0xd2>
 8000ab6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000aba:	f380 8811 	msr	BASEPRI, r0
 8000abe:	e7fe      	b.n	8000abe <prvProcessReceivedCommands+0x9a>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d104      	bne.n	8000ad8 <prvProcessReceivedCommands+0xb4>
 8000ace:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ad2:	f380 8811 	msr	BASEPRI, r0
 8000ad6:	e7fe      	b.n	8000ad6 <prvProcessReceivedCommands+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	699a      	ldr	r2, [r3, #24]
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	18d1      	adds	r1, r2, r3
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	69b8      	ldr	r0, [r7, #24]
 8000ae6:	f7ff ff5b 	bl	80009a0 <prvInsertTimerInActiveList>
				break;
 8000aea:	e004      	b.n	8000af6 <prvProcessReceivedCommands+0xd2>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8000aec:	69b8      	ldr	r0, [r7, #24]
 8000aee:	f001 fa35 	bl	8001f5c <vPortFree>
				break;
 8000af2:	e000      	b.n	8000af6 <prvProcessReceivedCommands+0xd2>

			default	:			
				/* Don't expect to get here. */
				break;
 8000af4:	bf00      	nop

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <prvProcessReceivedCommands+0xf0>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	f107 0108 	add.w	r1, r7, #8
 8000afe:	2300      	movs	r3, #0
 8000b00:	2200      	movs	r2, #0
 8000b02:	f000 fffb 	bl	8001afc <xQueueGenericReceive>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d194      	bne.n	8000a36 <prvProcessReceivedCommands+0x12>
			default	:			
				/* Don't expect to get here. */
				break;
		}
	}
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000094 	.word	0x20000094

08000b18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8000b20:	e03f      	b.n	8000ba2 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <prvSwitchTimerLists+0xb0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <prvSwitchTimerLists+0xb0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fbaa 	bl	8002294 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b44:	69b8      	ldr	r0, [r7, #24]
 8000b46:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d128      	bne.n	8000ba2 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	699a      	ldr	r2, [r3, #24]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	4413      	add	r3, r2
 8000b58:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d90e      	bls.n	8000b80 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <prvSwitchTimerLists+0xb0>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	3304      	adds	r3, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4610      	mov	r0, r2
 8000b7a:	f001 fb51 	bl	8002220 <vListInsert>
 8000b7e:	e010      	b.n	8000ba2 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8000b80:	2300      	movs	r3, #0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	2300      	movs	r3, #0
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	69b8      	ldr	r0, [r7, #24]
 8000b8c:	f7ff fe00 	bl	8000790 <xTimerGenericCommand>
 8000b90:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <prvSwitchTimerLists+0x8a>
 8000b98:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000b9c:	f380 8811 	msr	BASEPRI, r0
 8000ba0:	e7fe      	b.n	8000ba0 <prvSwitchTimerLists+0x88>
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <prvSwitchTimerLists+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1ba      	bne.n	8000b22 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <prvSwitchTimerLists+0xb0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <prvSwitchTimerLists+0xb4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <prvSwitchTimerLists+0xb0>)
 8000bb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <prvSwitchTimerLists+0xb4>)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	3720      	adds	r7, #32
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000008c 	.word	0x2000008c
 8000bcc:	20000090 	.word	0x20000090

08000bd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8000bd4:	f001 fa42 	bl	800205c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <prvCheckForValidListAndQueue+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d113      	bne.n	8000c08 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <prvCheckForValidListAndQueue+0x44>)
 8000be2:	f001 fac7 	bl	8002174 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <prvCheckForValidListAndQueue+0x48>)
 8000be8:	f001 fac4 	bl	8002174 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <prvCheckForValidListAndQueue+0x4c>)
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <prvCheckForValidListAndQueue+0x44>)
 8000bf0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <prvCheckForValidListAndQueue+0x50>)
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <prvCheckForValidListAndQueue+0x48>)
 8000bf6:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	210c      	movs	r1, #12
 8000bfc:	200a      	movs	r0, #10
 8000bfe:	f000 fe13 	bl	8001828 <xQueueGenericCreate>
 8000c02:	4602      	mov	r2, r0
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <prvCheckForValidListAndQueue+0x40>)
 8000c06:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8000c08:	f001 fa3a 	bl	8002080 <vPortExitCritical>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000094 	.word	0x20000094
 8000c14:	20000064 	.word	0x20000064
 8000c18:	20000078 	.word	0x20000078
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	20000090 	.word	0x20000090

08000c24 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	4613      	mov	r3, r2
 8000c32:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d104      	bne.n	8000c44 <xTaskGenericCreate+0x20>
 8000c3a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000c3e:	f380 8811 	msr	BASEPRI, r0
 8000c42:	e7fe      	b.n	8000c42 <xTaskGenericCreate+0x1e>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 8000c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	d904      	bls.n	8000c54 <xTaskGenericCreate+0x30>
 8000c4a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000c4e:	f380 8811 	msr	BASEPRI, r0
 8000c52:	e7fe      	b.n	8000c52 <xTaskGenericCreate+0x2e>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fcdd 	bl	8001618 <prvAllocateTCBAndStack>
 8000c5e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d07e      	beq.n	8000d64 <xTaskGenericCreate+0x140>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c70:	3b01      	subs	r3, #1
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f023 0307 	bic.w	r3, r3, #7
 8000c7e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d004      	beq.n	8000c94 <xTaskGenericCreate+0x70>
 8000c8a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000c8e:	f380 8811 	msr	BASEPRI, r0
 8000c92:	e7fe      	b.n	8000c92 <xTaskGenericCreate+0x6e>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	69b8      	ldr	r0, [r7, #24]
 8000ca0:	f000 fbd4 	bl	800144c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	68f9      	ldr	r1, [r7, #12]
 8000ca8:	6978      	ldr	r0, [r7, #20]
 8000caa:	f001 f961 	bl	8001f70 <pxPortInitialiseStack>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <xTaskGenericCreate+0x9c>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8000cc0:	f001 f9cc 	bl	800205c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000cc4:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <xTaskGenericCreate+0x170>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a32      	ldr	r2, [pc, #200]	; (8000d94 <xTaskGenericCreate+0x170>)
 8000ccc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8000cce:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <xTaskGenericCreate+0x174>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d109      	bne.n	8000cea <xTaskGenericCreate+0xc6>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000cd6:	4a30      	ldr	r2, [pc, #192]	; (8000d98 <xTaskGenericCreate+0x174>)
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <xTaskGenericCreate+0x170>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d10f      	bne.n	8000d04 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8000ce4:	f000 fbe8 	bl	80014b8 <prvInitialiseTaskLists>
 8000ce8:	e00c      	b.n	8000d04 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <xTaskGenericCreate+0x178>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d108      	bne.n	8000d04 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000cf2:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <xTaskGenericCreate+0x174>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d802      	bhi.n	8000d04 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 8000cfe:	4a26      	ldr	r2, [pc, #152]	; (8000d98 <xTaskGenericCreate+0x174>)
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <xTaskGenericCreate+0x17c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d903      	bls.n	8000d18 <xTaskGenericCreate+0xf4>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d14:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <xTaskGenericCreate+0x17c>)
 8000d16:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTCBNumber;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <xTaskGenericCreate+0x180>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif
			uxTCBNumber++;
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <xTaskGenericCreate+0x180>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <xTaskGenericCreate+0x180>)
 8000d28:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <xTaskGenericCreate+0x184>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d903      	bls.n	8000d3e <xTaskGenericCreate+0x11a>
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <xTaskGenericCreate+0x184>)
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4a18      	ldr	r2, [pc, #96]	; (8000dac <xTaskGenericCreate+0x188>)
 8000d4c:	441a      	add	r2, r3
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	3304      	adds	r3, #4
 8000d52:	4619      	mov	r1, r3
 8000d54:	4610      	mov	r0, r2
 8000d56:	f001 fa3b 	bl	80021d0 <vListInsertEnd>

			xReturn = pdPASS;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61fb      	str	r3, [r7, #28]
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000d5e:	f001 f98f 	bl	8002080 <vPortExitCritical>
 8000d62:	e002      	b.n	8000d6a <xTaskGenericCreate+0x146>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d10b      	bne.n	8000d88 <xTaskGenericCreate+0x164>
	{
		if( xSchedulerRunning != pdFALSE )
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <xTaskGenericCreate+0x178>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d007      	beq.n	8000d88 <xTaskGenericCreate+0x164>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <xTaskGenericCreate+0x174>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d201      	bcs.n	8000d88 <xTaskGenericCreate+0x164>
			{
				portYIELD_WITHIN_API();
 8000d84:	f001 f95c 	bl	8002040 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
 8000d88:	69fb      	ldr	r3, [r7, #28]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000174 	.word	0x20000174
 8000d98:	2000009c 	.word	0x2000009c
 8000d9c:	20000184 	.word	0x20000184
 8000da0:	2000017c 	.word	0x2000017c
 8000da4:	20000198 	.word	0x20000198
 8000da8:	20000180 	.word	0x20000180
 8000dac:	200000a0 	.word	0x200000a0

08000db0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d012      	beq.n	8000de8 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 8000dc2:	f000 f85b 	bl	8000e7c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <vTaskDelay+0x4c>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <vTaskDelay+0x50>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fa5c 	bl	8002294 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000ddc:	68b8      	ldr	r0, [r7, #8]
 8000dde:	f000 fbe5 	bl	80015ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000de2:	f000 f859 	bl	8000e98 <xTaskResumeAll>
 8000de6:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 8000dee:	f001 f927 	bl	8002040 <vPortYieldFromISR>
		}
	}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000178 	.word	0x20000178
 8000e00:	2000009c 	.word	0x2000009c

08000e04 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9303      	str	r3, [sp, #12]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	2300      	movs	r3, #0
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	2300      	movs	r3, #0
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	2282      	movs	r2, #130	; 0x82
 8000e1e:	4913      	ldr	r1, [pc, #76]	; (8000e6c <vTaskStartScheduler+0x68>)
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <vTaskStartScheduler+0x6c>)
 8000e22:	f7ff feff 	bl	8000c24 <xTaskGenericCreate>
 8000e26:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d102      	bne.n	8000e34 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8000e2e:	f7ff fc81 	bl	8000734 <xTimerCreateTimerTask>
 8000e32:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d10b      	bne.n	8000e52 <vTaskStartScheduler+0x4e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8000e3a:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000e3e:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <vTaskStartScheduler+0x70>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <vTaskStartScheduler+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000e4e:	f001 f8db 	bl	8002008 <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d104      	bne.n	8000e62 <vTaskStartScheduler+0x5e>
 8000e58:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000e5c:	f380 8811 	msr	BASEPRI, r0
 8000e60:	e7fe      	b.n	8000e60 <vTaskStartScheduler+0x5c>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	08002a04 	.word	0x08002a04
 8000e70:	08001429 	.word	0x08001429
 8000e74:	20000184 	.word	0x20000184
 8000e78:	20000178 	.word	0x20000178

08000e7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <vTaskSuspendAll+0x18>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	3301      	adds	r3, #1
 8000e86:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <vTaskSuspendAll+0x18>)
 8000e88:	6013      	str	r3, [r2, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	20000188 	.word	0x20000188

08000e98 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000ea2:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <xTaskResumeAll+0xe8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d104      	bne.n	8000eb4 <xTaskResumeAll+0x1c>
 8000eaa:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000eae:	f380 8811 	msr	BASEPRI, r0
 8000eb2:	e7fe      	b.n	8000eb2 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000eb4:	f001 f8d2 	bl	800205c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000eb8:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <xTaskResumeAll+0xe8>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <xTaskResumeAll+0xe8>)
 8000ec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <xTaskResumeAll+0xe8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d152      	bne.n	8000f70 <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <xTaskResumeAll+0xec>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d04e      	beq.n	8000f70 <xTaskResumeAll+0xd8>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8000ed6:	e027      	b.n	8000f28 <xTaskResumeAll+0x90>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <xTaskResumeAll+0xf0>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8000ede:	f104 0318 	add.w	r3, r4, #24
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 f9d6 	bl	8002294 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8000ee8:	1d23      	adds	r3, r4, #4
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 f9d2 	bl	8002294 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8000ef0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <xTaskResumeAll+0xf4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d902      	bls.n	8000f00 <xTaskResumeAll+0x68>
 8000efa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000efc:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <xTaskResumeAll+0xf4>)
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <xTaskResumeAll+0xf8>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	1d22      	adds	r2, r4, #4
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f95c 	bl	80021d0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <xTaskResumeAll+0xfc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d301      	bcc.n	8000f28 <xTaskResumeAll+0x90>
					{
						xYieldRequired = pdTRUE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <xTaskResumeAll+0xf0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1d3      	bne.n	8000ed8 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <xTaskResumeAll+0x100>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00d      	beq.n	8000f54 <xTaskResumeAll+0xbc>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000f38:	e006      	b.n	8000f48 <xTaskResumeAll+0xb0>
					{
						vTaskIncrementTick();
 8000f3a:	f000 f843 	bl	8000fc4 <vTaskIncrementTick>
						--uxMissedTicks;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <xTaskResumeAll+0x100>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <xTaskResumeAll+0x100>)
 8000f46:	6013      	str	r3, [r2, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <xTaskResumeAll+0x100>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f4      	bne.n	8000f3a <xTaskResumeAll+0xa2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8000f50:	2301      	movs	r3, #1
 8000f52:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d003      	beq.n	8000f62 <xTaskResumeAll+0xca>
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <xTaskResumeAll+0x104>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d106      	bne.n	8000f70 <xTaskResumeAll+0xd8>
				{
					xAlreadyYielded = pdTRUE;
 8000f62:	2301      	movs	r3, #1
 8000f64:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <xTaskResumeAll+0x104>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8000f6c:	f001 f868 	bl	8002040 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8000f70:	f001 f886 	bl	8002080 <vPortExitCritical>

	return xAlreadyYielded;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd90      	pop	{r4, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000188 	.word	0x20000188
 8000f84:	20000174 	.word	0x20000174
 8000f88:	20000134 	.word	0x20000134
 8000f8c:	20000180 	.word	0x20000180
 8000f90:	200000a0 	.word	0x200000a0
 8000f94:	2000009c 	.word	0x2000009c
 8000f98:	2000018c 	.word	0x2000018c
 8000f9c:	20000190 	.word	0x20000190

08000fa0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8000fa6:	f001 f859 	bl	800205c <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <xTaskGetTickCount+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 8000fb0:	f001 f866 	bl	8002080 <vPortExitCritical>

	return xTicks;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000178 	.word	0x20000178

08000fc4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8000fca:	4b49      	ldr	r3, [pc, #292]	; (80010f0 <vTaskIncrementTick+0x12c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d17c      	bne.n	80010cc <vTaskIncrementTick+0x108>
	{
		++xTickCount;
 8000fd2:	4b48      	ldr	r3, [pc, #288]	; (80010f4 <vTaskIncrementTick+0x130>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a46      	ldr	r2, [pc, #280]	; (80010f4 <vTaskIncrementTick+0x130>)
 8000fda:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
 8000fdc:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <vTaskIncrementTick+0x130>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d12b      	bne.n	800103c <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
 8000fe4:	4b44      	ldr	r3, [pc, #272]	; (80010f8 <vTaskIncrementTick+0x134>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <vTaskIncrementTick+0x34>
 8000fee:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ff2:	f380 8811 	msr	BASEPRI, r0
 8000ff6:	e7fe      	b.n	8000ff6 <vTaskIncrementTick+0x32>
			
			pxTemp = pxDelayedTaskList;
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <vTaskIncrementTick+0x134>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <vTaskIncrementTick+0x138>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a3d      	ldr	r2, [pc, #244]	; (80010f8 <vTaskIncrementTick+0x134>)
 8001004:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8001006:	4a3d      	ldr	r2, [pc, #244]	; (80010fc <vTaskIncrementTick+0x138>)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
 800100c:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <vTaskIncrementTick+0x13c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	4a3b      	ldr	r2, [pc, #236]	; (8001100 <vTaskIncrementTick+0x13c>)
 8001014:	6013      	str	r3, [r2, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <vTaskIncrementTick+0x134>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d104      	bne.n	800102a <vTaskIncrementTick+0x66>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8001020:	4b38      	ldr	r3, [pc, #224]	; (8001104 <vTaskIncrementTick+0x140>)
 8001022:	f04f 32ff 	mov.w	r2, #4294967295
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e008      	b.n	800103c <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <vTaskIncrementTick+0x134>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4a32      	ldr	r2, [pc, #200]	; (8001104 <vTaskIncrementTick+0x140>)
 800103a:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <vTaskIncrementTick+0x130>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b30      	ldr	r3, [pc, #192]	; (8001104 <vTaskIncrementTick+0x140>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d348      	bcc.n	80010da <vTaskIncrementTick+0x116>
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <vTaskIncrementTick+0x134>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <vTaskIncrementTick+0x98>
 8001052:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <vTaskIncrementTick+0x140>)
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e03e      	b.n	80010da <vTaskIncrementTick+0x116>
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <vTaskIncrementTick+0x134>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <vTaskIncrementTick+0x130>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	429a      	cmp	r2, r3
 8001074:	d203      	bcs.n	800107e <vTaskIncrementTick+0xba>
 8001076:	4a23      	ldr	r2, [pc, #140]	; (8001104 <vTaskIncrementTick+0x140>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e02d      	b.n	80010da <vTaskIncrementTick+0x116>
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3304      	adds	r3, #4
 8001082:	4618      	mov	r0, r3
 8001084:	f001 f906 	bl	8002294 <vListRemove>
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	2b00      	cmp	r3, #0
 800108e:	d004      	beq.n	800109a <vTaskIncrementTick+0xd6>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	3318      	adds	r3, #24
 8001094:	4618      	mov	r0, r3
 8001096:	f001 f8fd 	bl	8002294 <vListRemove>
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <vTaskIncrementTick+0x144>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d903      	bls.n	80010ae <vTaskIncrementTick+0xea>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <vTaskIncrementTick+0x144>)
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <vTaskIncrementTick+0x148>)
 80010bc:	441a      	add	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3304      	adds	r3, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f001 f883 	bl	80021d0 <vListInsertEnd>
 80010ca:	e7bd      	b.n	8001048 <vTaskIncrementTick+0x84>
	}
	else
	{
		++uxMissedTicks;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <vTaskIncrementTick+0x14c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <vTaskIncrementTick+0x14c>)
 80010d4:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80010d6:	f7ff faed 	bl	80006b4 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <vTaskIncrementTick+0x14c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <vTaskIncrementTick+0x122>
		{
			vApplicationTickHook();
 80010e2:	f7ff fae7 	bl	80006b4 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000188 	.word	0x20000188
 80010f4:	20000178 	.word	0x20000178
 80010f8:	2000012c 	.word	0x2000012c
 80010fc:	20000130 	.word	0x20000130
 8001100:	20000194 	.word	0x20000194
 8001104:	20000010 	.word	0x20000010
 8001108:	20000180 	.word	0x20000180
 800110c:	200000a0 	.word	0x200000a0
 8001110:	2000018c 	.word	0x2000018c

08001114 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <vTaskSwitchContext+0x90>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d011      	beq.n	8001146 <vTaskSwitchContext+0x32>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <vTaskSwitchContext+0x94>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
	
		traceTASK_SWITCHED_IN();
	}
}
 8001128:	e036      	b.n	8001198 <vTaskSwitchContext+0x84>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <vTaskSwitchContext+0x98>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d104      	bne.n	800113c <vTaskSwitchContext+0x28>
 8001132:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001136:	f380 8811 	msr	BASEPRI, r0
 800113a:	e7fe      	b.n	800113a <vTaskSwitchContext+0x26>
			--uxTopReadyPriority;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <vTaskSwitchContext+0x98>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3b01      	subs	r3, #1
 8001142:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <vTaskSwitchContext+0x98>)
 8001144:	6013      	str	r3, [r2, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <vTaskSwitchContext+0x98>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4919      	ldr	r1, [pc, #100]	; (80011b0 <vTaskSwitchContext+0x9c>)
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0e6      	beq.n	800112a <vTaskSwitchContext+0x16>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <vTaskSwitchContext+0x98>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <vTaskSwitchContext+0x9c>)
 800116a:	4413      	add	r3, r2
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3308      	adds	r3, #8
 8001180:	429a      	cmp	r2, r3
 8001182:	d104      	bne.n	800118e <vTaskSwitchContext+0x7a>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <vTaskSwitchContext+0xa0>)
 8001196:	6013      	str	r3, [r2, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	20000188 	.word	0x20000188
 80011a8:	20000190 	.word	0x20000190
 80011ac:	20000180 	.word	0x20000180
 80011b0:	200000a0 	.word	0x200000a0
 80011b4:	2000009c 	.word	0x2000009c

080011b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d104      	bne.n	80011d2 <vTaskPlaceOnEventList+0x1a>
 80011c8:	f04f 0050 	mov.w	r0, #80	; 0x50
 80011cc:	f380 8811 	msr	BASEPRI, r0
 80011d0:	e7fe      	b.n	80011d0 <vTaskPlaceOnEventList+0x18>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <vTaskPlaceOnEventList+0x64>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3318      	adds	r3, #24
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f001 f820 	bl	8002220 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <vTaskPlaceOnEventList+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 f854 	bl	8002294 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f2:	d107      	bne.n	8001204 <vTaskPlaceOnEventList+0x4c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <vTaskPlaceOnEventList+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <vTaskPlaceOnEventList+0x68>)
 80011fe:	f000 ffe7 	bl	80021d0 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8001202:	e007      	b.n	8001214 <vTaskPlaceOnEventList+0x5c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <vTaskPlaceOnEventList+0x6c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 f9cc 	bl	80015ac <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000009c 	.word	0x2000009c
 8001220:	20000160 	.word	0x20000160
 8001224:	20000178 	.word	0x20000178

08001228 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d104      	bne.n	8001242 <vTaskPlaceOnEventListRestricted+0x1a>
 8001238:	f04f 0050 	mov.w	r0, #80	; 0x50
 800123c:	f380 8811 	msr	BASEPRI, r0
 8001240:	e7fe      	b.n	8001240 <vTaskPlaceOnEventListRestricted+0x18>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3318      	adds	r3, #24
 8001248:	4619      	mov	r1, r3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 ffc0 	bl	80021d0 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3304      	adds	r3, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f001 f81c 	bl	8002294 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <vTaskPlaceOnEventListRestricted+0x50>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 f9a0 	bl	80015ac <prvAddCurrentTaskToDelayedList>
	}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000009c 	.word	0x2000009c
 8001278:	20000178 	.word	0x20000178

0800127c <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d104      	bne.n	800129c <xTaskRemoveFromEventList+0x20>
 8001292:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001296:	f380 8811 	msr	BASEPRI, r0
 800129a:	e7fe      	b.n	800129a <xTaskRemoveFromEventList+0x1e>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3318      	adds	r3, #24
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fff7 	bl	8002294 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <xTaskRemoveFromEventList+0x9c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d11d      	bne.n	80012ea <xTaskRemoveFromEventList+0x6e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3304      	adds	r3, #4
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 ffee 	bl	8002294 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <xTaskRemoveFromEventList+0xa0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d903      	bls.n	80012cc <xTaskRemoveFromEventList+0x50>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <xTaskRemoveFromEventList+0xa0>)
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4a11      	ldr	r2, [pc, #68]	; (8001320 <xTaskRemoveFromEventList+0xa4>)
 80012da:	441a      	add	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3304      	adds	r3, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f000 ff74 	bl	80021d0 <vListInsertEnd>
 80012e8:	e005      	b.n	80012f6 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3318      	adds	r3, #24
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <xTaskRemoveFromEventList+0xa8>)
 80012f2:	f000 ff6d 	bl	80021d0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <xTaskRemoveFromEventList+0xac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	429a      	cmp	r2, r3
 8001302:	d302      	bcc.n	800130a <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8001304:	2301      	movs	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	e001      	b.n	800130e <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000188 	.word	0x20000188
 800131c:	20000180 	.word	0x20000180
 8001320:	200000a0 	.word	0x200000a0
 8001324:	20000134 	.word	0x20000134
 8001328:	2000009c 	.word	0x2000009c

0800132c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <vTaskSetTimeOutState+0x18>
 800133a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800133e:	f380 8811 	msr	BASEPRI, r0
 8001342:	e7fe      	b.n	8001342 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <vTaskSetTimeOutState+0x34>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <vTaskSetTimeOutState+0x38>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20000194 	.word	0x20000194
 8001364:	20000178 	.word	0x20000178

08001368 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d104      	bne.n	8001382 <xTaskCheckForTimeOut+0x1a>
 8001378:	f04f 0050 	mov.w	r0, #80	; 0x50
 800137c:	f380 8811 	msr	BASEPRI, r0
 8001380:	e7fe      	b.n	8001380 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d104      	bne.n	8001392 <xTaskCheckForTimeOut+0x2a>
 8001388:	f04f 0050 	mov.w	r0, #80	; 0x50
 800138c:	f380 8811 	msr	BASEPRI, r0
 8001390:	e7fe      	b.n	8001390 <xTaskCheckForTimeOut+0x28>

	taskENTER_CRITICAL();
 8001392:	f000 fe63 	bl	800205c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139e:	d102      	bne.n	80013a6 <xTaskCheckForTimeOut+0x3e>
			{
				xReturn = pdFALSE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e029      	b.n	80013fa <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <xTaskCheckForTimeOut+0xa0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d008      	beq.n	80013c4 <xTaskCheckForTimeOut+0x5c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <xTaskCheckForTimeOut+0xa4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d802      	bhi.n	80013c4 <xTaskCheckForTimeOut+0x5c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80013be:	2301      	movs	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	e01a      	b.n	80013fa <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <xTaskCheckForTimeOut+0xa4>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	1ad2      	subs	r2, r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d20f      	bcs.n	80013f6 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <xTaskCheckForTimeOut+0xa4>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	1ad2      	subs	r2, r2, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff9e 	bl	800132c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	e001      	b.n	80013fa <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
 80013f6:	2301      	movs	r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013fa:	f000 fe41 	bl	8002080 <vPortExitCritical>

	return xReturn;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000194 	.word	0x20000194
 800140c:	20000178 	.word	0x20000178

08001410 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <vTaskMissedYield+0x14>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	20000190 	.word	0x20000190

08001428 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8001430:	f000 f882 	bl	8001538 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <prvIdleTask+0x20>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d901      	bls.n	8001440 <prvIdleTask+0x18>
			{
				taskYIELD();
 800143c:	f000 fe00 	bl	8002040 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001440:	f7ff f948 	bl	80006d4 <vApplicationIdleHook>
		}
		#endif
	}
 8001444:	e7f4      	b.n	8001430 <prvIdleTask+0x8>
 8001446:	bf00      	nop
 8001448:	200000a0 	.word	0x200000a0

0800144c <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3334      	adds	r3, #52	; 0x34
 800145e:	220a      	movs	r2, #10
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	4618      	mov	r0, r3
 8001464:	f001 faa1 	bl	80029aa <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b04      	cmp	r3, #4
 8001474:	d901      	bls.n	800147a <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8001476:	2304      	movs	r3, #4
 8001478:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3304      	adds	r3, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fe92 	bl	80021b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3318      	adds	r3, #24
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fe8d 	bl	80021b4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f1c3 0205 	rsb	r2, r3, #5
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	e00c      	b.n	80014de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <prvInitialiseTaskLists+0x60>)
 80014d0:	4413      	add	r3, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fe4e 	bl	8002174 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3301      	adds	r3, #1
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d9ef      	bls.n	80014c4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <prvInitialiseTaskLists+0x64>)
 80014e6:	f000 fe45 	bl	8002174 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <prvInitialiseTaskLists+0x68>)
 80014ec:	f000 fe42 	bl	8002174 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <prvInitialiseTaskLists+0x6c>)
 80014f2:	f000 fe3f 	bl	8002174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 80014f6:	480c      	ldr	r0, [pc, #48]	; (8001528 <prvInitialiseTaskLists+0x70>)
 80014f8:	f000 fe3c 	bl	8002174 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 80014fc:	480b      	ldr	r0, [pc, #44]	; (800152c <prvInitialiseTaskLists+0x74>)
 80014fe:	f000 fe39 	bl	8002174 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <prvInitialiseTaskLists+0x78>)
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <prvInitialiseTaskLists+0x64>)
 8001506:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <prvInitialiseTaskLists+0x7c>)
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <prvInitialiseTaskLists+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200000a0 	.word	0x200000a0
 800151c:	20000104 	.word	0x20000104
 8001520:	20000118 	.word	0x20000118
 8001524:	20000134 	.word	0x20000134
 8001528:	20000148 	.word	0x20000148
 800152c:	20000160 	.word	0x20000160
 8001530:	2000012c 	.word	0x2000012c
 8001534:	20000130 	.word	0x20000130

08001538 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <prvCheckTasksWaitingTermination+0x68>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d028      	beq.n	8001598 <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
 8001546:	f7ff fc99 	bl	8000e7c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <prvCheckTasksWaitingTermination+0x6c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
 800155a:	f7ff fc9d 	bl	8000e98 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d119      	bne.n	8001598 <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001564:	f000 fd7a 	bl	800205c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <prvCheckTasksWaitingTermination+0x6c>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3304      	adds	r3, #4
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fe8d 	bl	8002294 <vListRemove>
					--uxCurrentNumberOfTasks;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <prvCheckTasksWaitingTermination+0x70>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3b01      	subs	r3, #1
 8001580:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <prvCheckTasksWaitingTermination+0x70>)
 8001582:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <prvCheckTasksWaitingTermination+0x68>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3b01      	subs	r3, #1
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <prvCheckTasksWaitingTermination+0x68>)
 800158c:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800158e:	f000 fd77 	bl	8002080 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	f000 f872 	bl	800167c <prvDeleteTCB>
			}
		}
	}
	#endif
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000015c 	.word	0x2000015c
 80015a4:	20000148 	.word	0x20000148
 80015a8:	20000174 	.word	0x20000174

080015ac <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <prvAddCurrentTaskToDelayedList+0x58>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <prvAddCurrentTaskToDelayedList+0x5c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d209      	bcs.n	80015da <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <prvAddCurrentTaskToDelayedList+0x60>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <prvAddCurrentTaskToDelayedList+0x58>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3304      	adds	r3, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4610      	mov	r0, r2
 80015d4:	f000 fe24 	bl	8002220 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
 80015d8:	e010      	b.n	80015fc <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <prvAddCurrentTaskToDelayedList+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <prvAddCurrentTaskToDelayedList+0x58>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3304      	adds	r3, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f000 fe1a 	bl	8002220 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <prvAddCurrentTaskToDelayedList+0x68>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d202      	bcs.n	80015fc <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 80015f6:	4a07      	ldr	r2, [pc, #28]	; (8001614 <prvAddCurrentTaskToDelayedList+0x68>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6013      	str	r3, [r2, #0]
		}
	}
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000009c 	.word	0x2000009c
 8001608:	20000178 	.word	0x20000178
 800160c:	20000130 	.word	0x20000130
 8001610:	2000012c 	.word	0x2000012c
 8001614:	20000010 	.word	0x20000010

08001618 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001624:	204c      	movs	r0, #76	; 0x4c
 8001626:	f000 fc5d 	bl	8001ee4 <pvPortMalloc>
 800162a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d01e      	beq.n	8001670 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d106      	bne.n	8001646 <prvAllocateTCBAndStack+0x2e>
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fc51 	bl	8001ee4 <pvPortMalloc>
 8001642:	4603      	mov	r3, r0
 8001644:	e000      	b.n	8001648 <prvAllocateTCBAndStack+0x30>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fc81 	bl	8001f5c <vPortFree>
			pxNewTCB = NULL;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e007      	b.n	8001670 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	461a      	mov	r2, r3
 800166a:	21a5      	movs	r1, #165	; 0xa5
 800166c:	f001 f995 	bl	800299a <memset>
		}
	}

	return pxNewTCB;
 8001670:	68fb      	ldr	r3, [r7, #12]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop

0800167c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
		above the vPortFree() calls. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fc67 	bl	8001f5c <vPortFree>
		vPortFree( pxTCB );
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fc64 	bl	8001f5c <vPortFree>
	}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <xTaskGetCurrentTaskHandle+0x1c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80016a8:	687b      	ldr	r3, [r7, #4]
	}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2000009c 	.word	0x2000009c

080016bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <xTaskGetSchedulerState+0x34>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	e008      	b.n	80016e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <xTaskGetSchedulerState+0x38>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80016d8:	2301      	movs	r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	e001      	b.n	80016e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80016de:	2302      	movs	r3, #2
 80016e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80016e2:	687b      	ldr	r3, [r7, #4]
	}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000184 	.word	0x20000184
 80016f4:	20000188 	.word	0x20000188

080016f8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d104      	bne.n	8001714 <vTaskPriorityInherit+0x1c>
 800170a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800170e:	f380 8811 	msr	BASEPRI, r0
 8001712:	e7fe      	b.n	8001712 <vTaskPriorityInherit+0x1a>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <vTaskPriorityInherit+0xa8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	429a      	cmp	r2, r3
 8001720:	d23a      	bcs.n	8001798 <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <vTaskPriorityInherit+0xa8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	f1c3 0205 	rsb	r2, r3, #5
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6959      	ldr	r1, [r3, #20]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <vTaskPriorityInherit+0xac>)
 8001742:	4413      	add	r3, r2
 8001744:	4299      	cmp	r1, r3
 8001746:	d122      	bne.n	800178e <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3304      	adds	r3, #4
 800174c:	4618      	mov	r0, r3
 800174e:	f000 fda1 	bl	8002294 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <vTaskPriorityInherit+0xa8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <vTaskPriorityInherit+0xb0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d903      	bls.n	8001770 <vTaskPriorityInherit+0x78>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <vTaskPriorityInherit+0xb0>)
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <vTaskPriorityInherit+0xac>)
 800177e:	441a      	add	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3304      	adds	r3, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f000 fd22 	bl	80021d0 <vListInsertEnd>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 800178c:	e004      	b.n	8001798 <vTaskPriorityInherit+0xa0>
				prvAddTaskToReadyQueue( pxTCB );
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <vTaskPriorityInherit+0xa8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000009c 	.word	0x2000009c
 80017a4:	200000a0 	.word	0x200000a0
 80017a8:	20000180 	.word	0x20000180

080017ac <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d02c      	beq.n	8001818 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d026      	beq.n	8001818 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fd60 	bl	8002294 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e0:	f1c3 0205 	rsb	r2, r3, #5
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <vTaskPriorityDisinherit+0x74>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d903      	bls.n	80017fc <vTaskPriorityDisinherit+0x50>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	4a09      	ldr	r2, [pc, #36]	; (8001820 <vTaskPriorityDisinherit+0x74>)
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <vTaskPriorityDisinherit+0x78>)
 800180a:	441a      	add	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3304      	adds	r3, #4
 8001810:	4619      	mov	r1, r3
 8001812:	4610      	mov	r0, r2
 8001814:	f000 fcdc 	bl	80021d0 <vListInsertEnd>
			}
		}
	}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000180 	.word	0x20000180
 8001824:	200000a0 	.word	0x200000a0

08001828 <xQueueGenericCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	4613      	mov	r3, r2
 8001834:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should 
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d052      	beq.n	80018e6 <xQueueGenericCreate+0xbe>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8001840:	2050      	movs	r0, #80	; 0x50
 8001842:	f000 fb4f 	bl	8001ee4 <pvPortMalloc>
 8001846:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d04b      	beq.n	80018e6 <xQueueGenericCreate+0xbe>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f000 fb42 	bl	8001ee4 <pvPortMalloc>
 8001860:	4602      	mov	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d038      	beq.n	80018e0 <xQueueGenericCreate+0xb8>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	441a      	add	r2, r3
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	605a      	str	r2, [r3, #4]
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2200      	movs	r2, #0
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	609a      	str	r2, [r3, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3b01      	subs	r3, #1
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	441a      	add	r2, r3
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	60da      	str	r2, [r3, #12]
				pxNewQueue->uxLength = uxQueueLength;
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
				pxNewQueue->xTxLock = queueUNLOCKED;
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	649a      	str	r2, [r3, #72]	; 0x48
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	79fa      	ldrb	r2, [r7, #7]
 80018c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	3310      	adds	r3, #16
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fc52 	bl	8002174 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	3324      	adds	r3, #36	; 0x24
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fc4d 	bl	8002174 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e002      	b.n	80018e6 <xQueueGenericCreate+0xbe>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 80018e0:	69b8      	ldr	r0, [r7, #24]
 80018e2:	f000 fb3b 	bl	8001f5c <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d104      	bne.n	80018f6 <xQueueGenericCreate+0xce>
 80018ec:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018f0:	f380 8811 	msr	BASEPRI, r0
 80018f4:	e7fe      	b.n	80018f4 <xQueueGenericCreate+0xcc>

	return xReturn;
 80018f6:	69fb      	ldr	r3, [r7, #28]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d104      	bne.n	8001922 <xQueueGenericSend+0x22>
 8001918:	f04f 0050 	mov.w	r0, #80	; 0x50
 800191c:	f380 8811 	msr	BASEPRI, r0
 8001920:	e7fe      	b.n	8001920 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <xQueueGenericSend+0x30>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <xQueueGenericSend+0x34>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <xQueueGenericSend+0x36>
 8001934:	2300      	movs	r3, #0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d104      	bne.n	8001944 <xQueueGenericSend+0x44>
 800193a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800193e:	f380 8811 	msr	BASEPRI, r0
 8001942:	e7fe      	b.n	8001942 <xQueueGenericSend+0x42>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001944:	f000 fb8a 	bl	800205c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	429a      	cmp	r2, r3
 8001952:	d216      	bcs.n	8001982 <xQueueGenericSend+0x82>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f99d 	bl	8001c98 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <xQueueGenericSend+0x7a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3324      	adds	r3, #36	; 0x24
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fc86 	bl	800127c <xTaskRemoveFromEventList>
 8001970:	4603      	mov	r3, r0
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <xQueueGenericSend+0x7a>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8001976:	f000 fb63 	bl	8002040 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 800197a:	f000 fb81 	bl	8002080 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800197e:	2301      	movs	r3, #1
 8001980:	e056      	b.n	8001a30 <xQueueGenericSend+0x130>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d103      	bne.n	8001990 <xQueueGenericSend+0x90>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001988:	f000 fb7a 	bl	8002080 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800198c:	2300      	movs	r3, #0
 800198e:	e04f      	b.n	8001a30 <xQueueGenericSend+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fcc6 	bl	800132c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 80019a4:	f000 fb6c 	bl	8002080 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80019a8:	f7ff fa68 	bl	8000e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80019ac:	f000 fb56 	bl	800205c <vPortEnterCritical>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d102      	bne.n	80019c0 <xQueueGenericSend+0xc0>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c8:	d102      	bne.n	80019d0 <xQueueGenericSend+0xd0>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	649a      	str	r2, [r3, #72]	; 0x48
 80019d0:	f000 fb56 	bl	8002080 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80019d4:	1d3a      	adds	r2, r7, #4
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fcc3 	bl	8001368 <xTaskCheckForTimeOut>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d11d      	bne.n	8001a24 <xQueueGenericSend+0x124>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 fa39 	bl	8001e60 <prvIsQueueFull>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d011      	beq.n	8001a18 <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3310      	adds	r3, #16
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fbdb 	bl	80011b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f9ca 	bl	8001d9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001a08:	f7ff fa46 	bl	8000e98 <xTaskResumeAll>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d198      	bne.n	8001944 <xQueueGenericSend+0x44>
				{
					portYIELD_WITHIN_API();
 8001a12:	f000 fb15 	bl	8002040 <vPortYieldFromISR>
 8001a16:	e795      	b.n	8001944 <xQueueGenericSend+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f9bf 	bl	8001d9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a1e:	f7ff fa3b 	bl	8000e98 <xTaskResumeAll>
 8001a22:	e78f      	b.n	8001944 <xQueueGenericSend+0x44>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f9b9 	bl	8001d9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a2a:	f7ff fa35 	bl	8000e98 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001a2e:	2300      	movs	r3, #0
		}
	}
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d104      	bne.n	8001a56 <xQueueGenericSendFromISR+0x1e>
 8001a4c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a50:	f380 8811 	msr	BASEPRI, r0
 8001a54:	e7fe      	b.n	8001a54 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxHigherPriorityTaskWoken );
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d104      	bne.n	8001a66 <xQueueGenericSendFromISR+0x2e>
 8001a5c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a60:	f380 8811 	msr	BASEPRI, r0
 8001a64:	e7fe      	b.n	8001a64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d103      	bne.n	8001a74 <xQueueGenericSendFromISR+0x3c>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <xQueueGenericSendFromISR+0x40>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <xQueueGenericSendFromISR+0x42>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d104      	bne.n	8001a88 <xQueueGenericSendFromISR+0x50>
 8001a7e:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a82:	f380 8811 	msr	BASEPRI, r0
 8001a86:	e7fe      	b.n	8001a86 <xQueueGenericSendFromISR+0x4e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a90:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d221      	bcs.n	8001ae4 <xQueueGenericSendFromISR+0xac>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f8f7 	bl	8001c98 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab2:	d10f      	bne.n	8001ad4 <xQueueGenericSendFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <xQueueGenericSendFromISR+0xa6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	3324      	adds	r3, #36	; 0x24
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fbdb 	bl	800127c <xTaskRemoveFromEventList>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <xQueueGenericSendFromISR+0xa6>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e004      	b.n	8001ade <xQueueGenericSendFromISR+0xa6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e001      	b.n	8001ae8 <xQueueGenericSendFromISR+0xb0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8001ae8:	f04f 0000 	mov.w	r0, #0
 8001aec:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
 8001af0:	697b      	ldr	r3, [r7, #20]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop

08001afc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d104      	bne.n	8001b1e <xQueueGenericReceive+0x22>
 8001b14:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b18:	f380 8811 	msr	BASEPRI, r0
 8001b1c:	e7fe      	b.n	8001b1c <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d103      	bne.n	8001b2c <xQueueGenericReceive+0x30>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <xQueueGenericReceive+0x34>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <xQueueGenericReceive+0x36>
 8001b30:	2300      	movs	r3, #0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d104      	bne.n	8001b40 <xQueueGenericReceive+0x44>
 8001b36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001b3a:	f380 8811 	msr	BASEPRI, r0
 8001b3e:	e7fe      	b.n	8001b3e <xQueueGenericReceive+0x42>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001b40:	f000 fa8c 	bl	800205c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d03b      	beq.n	8001bc4 <xQueueGenericReceive+0xc8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f8fb 	bl	8001d50 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11c      	bne.n	8001b9a <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d104      	bne.n	8001b7c <xQueueGenericReceive+0x80>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8001b72:	f7ff fd93 	bl	800169c <xTaskGetCurrentTaskHandle>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <xQueueGenericReceive+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3310      	adds	r3, #16
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fb77 	bl	800127c <xTaskRemoveFromEventList>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d113      	bne.n	8001bbc <xQueueGenericReceive+0xc0>
						{
							portYIELD_WITHIN_API();
 8001b94:	f000 fa54 	bl	8002040 <vPortYieldFromISR>
 8001b98:	e010      	b.n	8001bbc <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d009      	beq.n	8001bbc <xQueueGenericReceive+0xc0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3324      	adds	r3, #36	; 0x24
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fb65 	bl	800127c <xTaskRemoveFromEventList>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <xQueueGenericReceive+0xc0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8001bb8:	f000 fa42 	bl	8002040 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 8001bbc:	f000 fa60 	bl	8002080 <vPortExitCritical>
				return pdPASS;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e064      	b.n	8001c8e <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001bca:	f000 fa59 	bl	8002080 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e05d      	b.n	8001c8e <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d106      	bne.n	8001be6 <xQueueGenericReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fba5 	bl	800132c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
 8001be6:	f000 fa4b 	bl	8002080 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001bea:	f7ff f947 	bl	8000e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001bee:	f000 fa35 	bl	800205c <vPortEnterCritical>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d102      	bne.n	8001c02 <xQueueGenericReceive+0x106>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d102      	bne.n	8001c12 <xQueueGenericReceive+0x116>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	649a      	str	r2, [r3, #72]	; 0x48
 8001c12:	f000 fa35 	bl	8002080 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c16:	1d3a      	adds	r2, r7, #4
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fba2 	bl	8001368 <xTaskCheckForTimeOut>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d12b      	bne.n	8001c82 <xQueueGenericReceive+0x186>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f902 	bl	8001e34 <prvIsQueueEmpty>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01f      	beq.n	8001c76 <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d108      	bne.n	8001c50 <xQueueGenericReceive+0x154>
					{
						portENTER_CRITICAL();
 8001c3e:	f000 fa0d 	bl	800205c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fd56 	bl	80016f8 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8001c4c:	f000 fa18 	bl	8002080 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3324      	adds	r3, #36	; 0x24
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff faad 	bl	80011b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f000 f89c 	bl	8001d9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c64:	f7ff f918 	bl	8000e98 <xTaskResumeAll>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f47f af68 	bne.w	8001b40 <xQueueGenericReceive+0x44>
				{
					portYIELD_WITHIN_API();
 8001c70:	f000 f9e6 	bl	8002040 <vPortYieldFromISR>
 8001c74:	e764      	b.n	8001b40 <xQueueGenericReceive+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f890 	bl	8001d9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c7c:	f7ff f90c 	bl	8000e98 <xTaskResumeAll>
 8001c80:	e75e      	b.n	8001b40 <xQueueGenericReceive+0x44>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f88a 	bl	8001d9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c88:	f7ff f906 	bl	8000e98 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001c8c:	2300      	movs	r3, #0
		}
	}
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop

08001c98 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10c      	bne.n	8001cc6 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d143      	bne.n	8001d3c <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fd77 	bl	80017ac <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	e03a      	b.n	8001d3c <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d119      	bne.n	8001d00 <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6898      	ldr	r0, [r3, #8]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	f000 fe54 	bl	8002984 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	441a      	add	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d322      	bcc.n	8001d3c <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	e01d      	b.n	8001d3c <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	68d8      	ldr	r0, [r3, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	461a      	mov	r2, r3
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	f000 fe3a 	bl	8002984 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	425b      	negs	r3, r3
 8001d1a:	441a      	add	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d207      	bcs.n	8001d3c <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	425b      	negs	r3, r3
 8001d36:	441a      	add	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop

08001d50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d018      	beq.n	8001d94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	441a      	add	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d303      	bcc.n	8001d84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68d9      	ldr	r1, [r3, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6838      	ldr	r0, [r7, #0]
 8001d90:	f000 fdf8 	bl	8002984 <memcpy>
	}
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001da4:	f000 f95a 	bl	800205c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001da8:	e012      	b.n	8001dd0 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d013      	beq.n	8001dda <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3324      	adds	r3, #36	; 0x24
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fa60 	bl	800127c <xTaskRemoveFromEventList>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8001dc2:	f7ff fb25 	bl	8001410 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	dce8      	bgt.n	8001daa <prvUnlockQueue+0xe>
 8001dd8:	e000      	b.n	8001ddc <prvUnlockQueue+0x40>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
 8001dda:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f04f 32ff 	mov.w	r2, #4294967295
 8001de2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8001de4:	f000 f94c 	bl	8002080 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001de8:	f000 f938 	bl	800205c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001dec:	e012      	b.n	8001e14 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d013      	beq.n	8001e1e <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3310      	adds	r3, #16
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa3e 	bl	800127c <xTaskRemoveFromEventList>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 8001e06:	f7ff fb03 	bl	8001410 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	1e5a      	subs	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	dce8      	bgt.n	8001dee <prvUnlockQueue+0x52>
 8001e1c:	e000      	b.n	8001e20 <prvUnlockQueue+0x84>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 8001e1e:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f04f 32ff 	mov.w	r2, #4294967295
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001e28:	f000 f92a 	bl	8002080 <vPortExitCritical>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001e3c:	f000 f90e 	bl	800205c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8001e50:	f000 f916 	bl	8002080 <vPortExitCritical>

	return xReturn;
 8001e54:	68fb      	ldr	r3, [r7, #12]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop

08001e60 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8001e68:	f000 f8f8 	bl	800205c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
 8001e80:	f000 f8fe 	bl	8002080 <vPortExitCritical>

	return xReturn;
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop

08001e90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001e9a:	f000 f8df 	bl	800205c <vPortEnterCritical>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea6:	d102      	bne.n	8001eae <vQueueWaitForMessageRestricted+0x1e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb6:	d102      	bne.n	8001ebe <vQueueWaitForMessageRestricted+0x2e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	649a      	str	r2, [r3, #72]	; 0x48
 8001ebe:	f000 f8df 	bl	8002080 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3324      	adds	r3, #36	; 0x24
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f9a9 	bl	8001228 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff60 	bl	8001d9c <prvUnlockQueue>
	}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d004      	beq.n	8001f04 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f023 0307 	bic.w	r3, r3, #7
 8001f00:	3308      	adds	r3, #8
 8001f02:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8001f04:	f7fe ffba 	bl	8000e7c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <pvPortMalloc+0x70>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001f14:	d212      	bcs.n	8001f3c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <pvPortMalloc+0x70>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	441a      	add	r2, r3
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <pvPortMalloc+0x70>)
 8001f20:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d90a      	bls.n	8001f3c <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <pvPortMalloc+0x70>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <pvPortMalloc+0x74>)
 8001f2c:	4413      	add	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <pvPortMalloc+0x70>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <pvPortMalloc+0x70>)
 8001f3a:	6013      	str	r3, [r2, #0]
		}	
	}
	xTaskResumeAll();
 8001f3c:	f7fe ffac 	bl	8000e98 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <pvPortMalloc+0x66>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8001f46:	f7fe fbd5 	bl	80006f4 <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200015a0 	.word	0x200015a0
 8001f58:	200001a0 	.word	0x200001a0

08001f5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3b04      	subs	r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3b04      	subs	r3, #4
 8001f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	3b14      	subs	r3, #20
 8001fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3b24      	subs	r3, #36	; 0x24
 8001fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f06f 0202 	mvn.w	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
	return pxTopOfStack;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop

08001fcc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <pxCurrentTCBConst2>)
 8001fce:	6819      	ldr	r1, [r3, #0]
 8001fd0:	6808      	ldr	r0, [r1, #0]
 8001fd2:	f850 eb04 	ldr.w	lr, [r0], #4
 8001fd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fda:	f380 8809 	msr	PSP, r0
 8001fde:	f04f 0000 	mov.w	r0, #0
 8001fe2:	f380 8811 	msr	BASEPRI, r0
 8001fe6:	4770      	bx	lr

08001fe8 <pxCurrentTCBConst2>:
 8001fe8:	2000009c 	.word	0x2000009c
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop

08001ff0 <vPortStartFirstTask>:
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	__asm volatile(
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <vPortStartFirstTask+0x14>)
 8001ff2:	6800      	ldr	r0, [r0, #0]
 8001ff4:	6800      	ldr	r0, [r0, #0]
 8001ff6:	f380 8808 	msr	MSP, r0
 8001ffa:	b662      	cpsie	i
 8001ffc:	df00      	svc	0
 8001ffe:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002000:	bf00      	nop
 8002002:	0000      	.short	0x0000
 8002004:	e000ed08 	.word	0xe000ed08

08002008 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <xPortStartScheduler+0x30>)
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <xPortStartScheduler+0x30>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002016:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <xPortStartScheduler+0x30>)
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <xPortStartScheduler+0x30>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8002024:	f000 f88a 	bl	800213c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <xPortStartScheduler+0x34>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800202e:	f7ff ffdf 	bl	8001ff0 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	e000ed20 	.word	0xe000ed20
 800203c:	20000014 	.word	0x20000014

08002040 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <vPortYieldFromISR+0x18>)
 8002046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800204a:	601a      	str	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed04 	.word	0xe000ed04

0800205c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8002060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002064:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <vPortEnterCritical+0x20>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	4a03      	ldr	r2, [pc, #12]	; (800207c <vPortEnterCritical+0x20>)
 8002070:	6013      	str	r3, [r2, #0]
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	20000014 	.word	0x20000014

08002080 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <vPortExitCritical+0x28>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3b01      	subs	r3, #1
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <vPortExitCritical+0x28>)
 800208c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <vPortExitCritical+0x28>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <vPortExitCritical+0x1e>
	{
		portENABLE_INTERRUPTS();
 8002096:	f04f 0000 	mov.w	r0, #0
 800209a:	f380 8811 	msr	BASEPRI, r0
	}
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	20000014 	.word	0x20000014

080020ac <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80020ac:	f3ef 8009 	mrs	r0, PSP
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <pxCurrentTCBConst>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80020b8:	f01e 0f10 	tst.w	lr, #16
 80020bc:	bf08      	it	eq
 80020be:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80020c2:	f840 ed04 	str.w	lr, [r0, #-4]!
 80020c6:	6010      	str	r0, [r2, #0]
 80020c8:	e92d 4008 	stmdb	sp!, {r3, lr}
 80020cc:	f04f 0050 	mov.w	r0, #80	; 0x50
 80020d0:	f380 8811 	msr	BASEPRI, r0
 80020d4:	f7ff f81e 	bl	8001114 <vTaskSwitchContext>
 80020d8:	f04f 0000 	mov.w	r0, #0
 80020dc:	f380 8811 	msr	BASEPRI, r0
 80020e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80020e4:	6819      	ldr	r1, [r3, #0]
 80020e6:	6808      	ldr	r0, [r1, #0]
 80020e8:	f850 eb04 	ldr.w	lr, [r0], #4
 80020ec:	f01e 0f10 	tst.w	lr, #16
 80020f0:	bf08      	it	eq
 80020f2:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80020f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80020fa:	f380 8809 	msr	PSP, r0
 80020fe:	4770      	bx	lr

08002100 <pxCurrentTCBConst>:
 8002100:	2000009c 	.word	0x2000009c
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop

08002108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
    unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <SysTick_Handler+0x30>)
 8002110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002114:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800211e:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 8002122:	f7fe ff4f 	bl	8000fc4 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8002126:	f04f 0000 	mov.w	r0, #0
 800212a:	f380 8811 	msr	BASEPRI, r0
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000ed04 	.word	0xe000ed04

0800213c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002140:	4a08      	ldr	r2, [pc, #32]	; (8002164 <prvSetupTimerInterrupt+0x28>)
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <prvSetupTimerInterrupt+0x2c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4909      	ldr	r1, [pc, #36]	; (800216c <prvSetupTimerInterrupt+0x30>)
 8002148:	fba1 1303 	umull	r1, r3, r1, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	3b01      	subs	r3, #1
 8002150:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <prvSetupTimerInterrupt+0x34>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e014 	.word	0xe000e014
 8002168:	20000000 	.word	0x20000000
 800216c:	10624dd3 	.word	0x10624dd3
 8002170:	e000e010 	.word	0xe000e010

08002174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f103 0208 	add.w	r2, r3, #8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f103 0208 	add.w	r2, r3, #8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f103 0208 	add.w	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop

080021d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	601a      	str	r2, [r3, #0]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002236:	d103      	bne.n	8002240 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e00c      	b.n	800225a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3308      	adds	r3, #8
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	e002      	b.n	800224e <vListInsert+0x2e>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d9f6      	bls.n	8002248 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685a      	ldr	r2, [r3, #4]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop

08002294 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6892      	ldr	r2, [r2, #8]
 80022a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6852      	ldr	r2, [r2, #4]
 80022ae:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d103      	bne.n	80022c8 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	801a      	strh	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop

08002308 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8002308:	b490      	push	{r4, r7}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	460a      	mov	r2, r1
 8002312:	71fb      	strb	r3, [r7, #7]
 8002314:	4613      	mov	r3, r2
 8002316:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800232c:	4916      	ldr	r1, [pc, #88]	; (8002388 <SYSCFG_EXTILineConfig+0x80>)
 800232e:	79bb      	ldrb	r3, [r7, #6]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	4a14      	ldr	r2, [pc, #80]	; (8002388 <SYSCFG_EXTILineConfig+0x80>)
 8002338:	79bb      	ldrb	r3, [r7, #6]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3302      	adds	r3, #2
 8002340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	43db      	mvns	r3, r3
 8002348:	401a      	ands	r2, r3
 800234a:	1c83      	adds	r3, r0, #2
 800234c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8002350:	480d      	ldr	r0, [pc, #52]	; (8002388 <SYSCFG_EXTILineConfig+0x80>)
 8002352:	79bb      	ldrb	r3, [r7, #6]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461c      	mov	r4, r3
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <SYSCFG_EXTILineConfig+0x80>)
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3302      	adds	r3, #2
 8002364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002368:	79f9      	ldrb	r1, [r7, #7]
 800236a:	79bb      	ldrb	r3, [r7, #6]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	431a      	orrs	r2, r3
 8002378:	1ca3      	adds	r3, r4, #2
 800237a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bc90      	pop	{r4, r7}
 8002386:	4770      	bx	lr
 8002388:	40013800 	.word	0x40013800

0800238c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800239e:	490a      	ldr	r1, [pc, #40]	; (80023c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80023a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80023aa:	e006      	b.n	80023ba <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80023ac:	4906      	ldr	r1, [pc, #24]	; (80023c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80023b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4013      	ands	r3, r2
 80023b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800

080023cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <RCC_APB2PeriphClockCmd+0x3c>)
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <RCC_APB2PeriphClockCmd+0x3c>)
 80023e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80023ea:	e006      	b.n	80023fa <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80023ec:	4906      	ldr	r1, [pc, #24]	; (8002408 <RCC_APB2PeriphClockCmd+0x3c>)
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <RCC_APB2PeriphClockCmd+0x3c>)
 80023f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	4013      	ands	r3, r2
 80023f8:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e076      	b.n	8002516 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002428:	2201      	movs	r2, #1
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d165      	bne.n	8002510 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2103      	movs	r1, #3
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	4619      	mov	r1, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	791b      	ldrb	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d003      	beq.n	8002482 <GPIO_Init+0x76>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	791b      	ldrb	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d12e      	bne.n	80024e0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2103      	movs	r1, #3
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	401a      	ands	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	795b      	ldrb	r3, [r3, #5]
 80024a0:	4619      	mov	r1, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	401a      	ands	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	799b      	ldrb	r3, [r3, #6]
 80024ce:	4619      	mov	r1, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	b29b      	uxth	r3, r3
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2103      	movs	r1, #3
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	401a      	ands	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	79db      	ldrb	r3, [r3, #7]
 8002500:	4619      	mov	r1, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3301      	adds	r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b0f      	cmp	r3, #15
 800251a:	d985      	bls.n	8002428 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800251c:	bf00      	nop
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e001      	b.n	800254e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	831a      	strh	r2, [r3, #24]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop

0800257c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	835a      	strh	r2, [r3, #26]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop

0800259c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80025a8:	4b34      	ldr	r3, [pc, #208]	; (800267c <EXTI_Init+0xe0>)
 80025aa:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	799b      	ldrb	r3, [r3, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d04f      	beq.n	8002654 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80025b4:	4931      	ldr	r1, [pc, #196]	; (800267c <EXTI_Init+0xe0>)
 80025b6:	4b31      	ldr	r3, [pc, #196]	; (800267c <EXTI_Init+0xe0>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	43db      	mvns	r3, r3
 80025c0:	4013      	ands	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80025c4:	492d      	ldr	r1, [pc, #180]	; (800267c <EXTI_Init+0xe0>)
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <EXTI_Init+0xe0>)
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4013      	ands	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	791b      	ldrb	r3, [r3, #4]
 80025d8:	461a      	mov	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	6811      	ldr	r1, [r2, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80025ee:	4923      	ldr	r1, [pc, #140]	; (800267c <EXTI_Init+0xe0>)
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <EXTI_Init+0xe0>)
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	4013      	ands	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80025fe:	491f      	ldr	r1, [pc, #124]	; (800267c <EXTI_Init+0xe0>)
 8002600:	4b1e      	ldr	r3, [pc, #120]	; (800267c <EXTI_Init+0xe0>)
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	43db      	mvns	r3, r3
 800260a:	4013      	ands	r3, r2
 800260c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	795b      	ldrb	r3, [r3, #5]
 8002612:	2b10      	cmp	r3, #16
 8002614:	d10e      	bne.n	8002634 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8002616:	4919      	ldr	r1, [pc, #100]	; (800267c <EXTI_Init+0xe0>)
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <EXTI_Init+0xe0>)
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4313      	orrs	r3, r2
 8002622:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8002624:	4915      	ldr	r1, [pc, #84]	; (800267c <EXTI_Init+0xe0>)
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <EXTI_Init+0xe0>)
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8002632:	e01d      	b.n	8002670 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <EXTI_Init+0xe0>)
 8002636:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	795b      	ldrb	r3, [r3, #5]
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4413      	add	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	6811      	ldr	r1, [r2, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8002652:	e00d      	b.n	8002670 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	791b      	ldrb	r3, [r3, #4]
 8002658:	461a      	mov	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4413      	add	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6811      	ldr	r1, [r2, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	43d2      	mvns	r2, r2
 800266c:	400a      	ands	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
  }
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40013c00 	.word	0x40013c00

08002680 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <EXTI_GetITStatus+0x44>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4013      	ands	r3, r2
 8002698:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <EXTI_GetITStatus+0x44>)
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <EXTI_GetITStatus+0x32>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
 80026b0:	e001      	b.n	80026b6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40013c00 	.word	0x40013c00

080026c8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80026d0:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <EXTI_ClearITPendingBit+0x1c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6153      	str	r3, [r2, #20]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	4a10      	ldr	r2, [pc, #64]	; (8002738 <STM_EVAL_LEDInit+0x50>)
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fe45 	bl	800238c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <STM_EVAL_LEDInit+0x54>)
 8002706:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800270a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800270c:	2301      	movs	r3, #1
 800270e:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002710:	2300      	movs	r3, #0
 8002712:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002718:	2302      	movs	r3, #2
 800271a:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <STM_EVAL_LEDInit+0x58>)
 8002720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002724:	f107 0208 	add.w	r2, r7, #8
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fe6e 	bl	800240c <GPIO_Init>
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	08002a2c 	.word	0x08002a2c
 800273c:	08002a24 	.word	0x08002a24
 8002740:	20000018 	.word	0x20000018

08002744 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <STM_EVAL_LEDOff+0x28>)
 8002752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002756:	79fa      	ldrb	r2, [r7, #7]
 8002758:	4905      	ldr	r1, [pc, #20]	; (8002770 <STM_EVAL_LEDOff+0x2c>)
 800275a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800275e:	835a      	strh	r2, [r3, #26]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	20000018 	.word	0x20000018
 8002770:	08002a24 	.word	0x08002a24

08002774 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <STM_EVAL_LEDToggle+0x34>)
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	79fa      	ldrb	r2, [r7, #7]
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <STM_EVAL_LEDToggle+0x34>)
 800278a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800278e:	6952      	ldr	r2, [r2, #20]
 8002790:	79f9      	ldrb	r1, [r7, #7]
 8002792:	4806      	ldr	r0, [pc, #24]	; (80027ac <STM_EVAL_LEDToggle+0x38>)
 8002794:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8002798:	404a      	eors	r2, r1
 800279a:	615a      	str	r2, [r3, #20]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	20000018 	.word	0x20000018
 80027ac:	08002a24 	.word	0x08002a24

080027b0 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	460a      	mov	r2, r1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4613      	mov	r3, r2
 80027be:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80027c0:	2301      	movs	r3, #1
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fde1 	bl	800238c <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80027ca:	2101      	movs	r1, #1
 80027cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027d0:	f7ff fdfc 	bl	80023cc <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80027d4:	2300      	movs	r3, #0
 80027d6:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80027dc:	2301      	movs	r3, #1
 80027de:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	4a18      	ldr	r2, [pc, #96]	; (8002844 <STM_EVAL_PBInit+0x94>)
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	f107 0218 	add.w	r2, r7, #24
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fe0c 	bl	800240c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d11f      	bne.n	800283a <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 80027fa:	2300      	movs	r3, #0
 80027fc:	2200      	movs	r2, #0
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fd81 	bl	8002308 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8002806:	2301      	movs	r3, #1
 8002808:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800280a:	2300      	movs	r3, #0
 800280c:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 800280e:	2308      	movs	r3, #8
 8002810:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8002812:	2301      	movs	r3, #1
 8002814:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff febe 	bl	800259c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8002820:	2306      	movs	r3, #6
 8002822:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8002824:	230f      	movs	r3, #15
 8002826:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8002828:	230f      	movs	r3, #15
 800282a:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f81d 	bl	8002874 <NVIC_Init>
  }
}
 800283a:	bf00      	nop
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000028 	.word	0x20000028

08002848 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <STM_EVAL_PBGetState+0x28>)
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	2201      	movs	r2, #1
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fe62 	bl	8002528 <GPIO_ReadInputDataBit>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000028 	.word	0x20000028

08002874 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	2300      	movs	r3, #0
 8002882:	73bb      	strb	r3, [r7, #14]
 8002884:	230f      	movs	r3, #15
 8002886:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	78db      	ldrb	r3, [r3, #3]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d038      	beq.n	8002902 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002890:	4b27      	ldr	r3, [pc, #156]	; (8002930 <NVIC_Init+0xbc>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	43db      	mvns	r3, r3
 8002896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	f1c3 0304 	rsb	r3, r3, #4
 80028a4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80028a6:	7b7a      	ldrb	r2, [r7, #13]
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	fa42 f303 	asr.w	r3, r2, r3
 80028ae:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	785b      	ldrb	r3, [r3, #1]
 80028b4:	461a      	mov	r2, r3
 80028b6:	7bbb      	ldrb	r3, [r7, #14]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	789a      	ldrb	r2, [r3, #2]
 80028c2:	7b7b      	ldrb	r3, [r7, #13]
 80028c4:	4013      	ands	r3, r2
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80028d4:	4a17      	ldr	r2, [pc, #92]	; (8002934 <NVIC_Init+0xc0>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80028e2:	4a14      	ldr	r2, [pc, #80]	; (8002934 <NVIC_Init+0xc0>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80028fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002900:	e00f      	b.n	8002922 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002902:	490c      	ldr	r1, [pc, #48]	; (8002934 <NVIC_Init+0xc0>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2201      	movs	r2, #1
 8002918:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800291a:	f100 0320 	add.w	r3, r0, #32
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00
 8002934:	e000e100 	.word	0xe000e100

08002938 <__libc_init_array>:
 8002938:	b570      	push	{r4, r5, r6, lr}
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <__libc_init_array+0x3c>)
 800293c:	4c0e      	ldr	r4, [pc, #56]	; (8002978 <__libc_init_array+0x40>)
 800293e:	1ae4      	subs	r4, r4, r3
 8002940:	10a4      	asrs	r4, r4, #2
 8002942:	2500      	movs	r5, #0
 8002944:	461e      	mov	r6, r3
 8002946:	42a5      	cmp	r5, r4
 8002948:	d004      	beq.n	8002954 <__libc_init_array+0x1c>
 800294a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800294e:	4798      	blx	r3
 8002950:	3501      	adds	r5, #1
 8002952:	e7f8      	b.n	8002946 <__libc_init_array+0xe>
 8002954:	f000 f872 	bl	8002a3c <_init>
 8002958:	4c08      	ldr	r4, [pc, #32]	; (800297c <__libc_init_array+0x44>)
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <__libc_init_array+0x48>)
 800295c:	1ae4      	subs	r4, r4, r3
 800295e:	10a4      	asrs	r4, r4, #2
 8002960:	2500      	movs	r5, #0
 8002962:	461e      	mov	r6, r3
 8002964:	42a5      	cmp	r5, r4
 8002966:	d004      	beq.n	8002972 <__libc_init_array+0x3a>
 8002968:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800296c:	4798      	blx	r3
 800296e:	3501      	adds	r5, #1
 8002970:	e7f8      	b.n	8002964 <__libc_init_array+0x2c>
 8002972:	bd70      	pop	{r4, r5, r6, pc}
 8002974:	08002a54 	.word	0x08002a54
 8002978:	08002a54 	.word	0x08002a54
 800297c:	08002a58 	.word	0x08002a58
 8002980:	08002a54 	.word	0x08002a54

08002984 <memcpy>:
 8002984:	b510      	push	{r4, lr}
 8002986:	1e43      	subs	r3, r0, #1
 8002988:	440a      	add	r2, r1
 800298a:	4291      	cmp	r1, r2
 800298c:	d004      	beq.n	8002998 <memcpy+0x14>
 800298e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002996:	e7f8      	b.n	800298a <memcpy+0x6>
 8002998:	bd10      	pop	{r4, pc}

0800299a <memset>:
 800299a:	4402      	add	r2, r0
 800299c:	4603      	mov	r3, r0
 800299e:	4293      	cmp	r3, r2
 80029a0:	d002      	beq.n	80029a8 <memset+0xe>
 80029a2:	f803 1b01 	strb.w	r1, [r3], #1
 80029a6:	e7fa      	b.n	800299e <memset+0x4>
 80029a8:	4770      	bx	lr

080029aa <strncpy>:
 80029aa:	b510      	push	{r4, lr}
 80029ac:	4603      	mov	r3, r0
 80029ae:	b142      	cbz	r2, 80029c2 <strncpy+0x18>
 80029b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029b4:	f803 4b01 	strb.w	r4, [r3], #1
 80029b8:	3a01      	subs	r2, #1
 80029ba:	2c00      	cmp	r4, #0
 80029bc:	d1f7      	bne.n	80029ae <strncpy+0x4>
 80029be:	441a      	add	r2, r3
 80029c0:	e000      	b.n	80029c4 <strncpy+0x1a>
 80029c2:	bd10      	pop	{r4, pc}
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d002      	beq.n	80029ce <strncpy+0x24>
 80029c8:	f803 4b01 	strb.w	r4, [r3], #1
 80029cc:	e7fa      	b.n	80029c4 <strncpy+0x1a>
 80029ce:	bd10      	pop	{r4, pc}
 80029d0:	2044454c 	.word	0x2044454c
 80029d4:	6b736154 	.word	0x6b736154
 80029d8:	00000000 	.word	0x00000000
 80029dc:	64616552 	.word	0x64616552
 80029e0:	776f5220 	.word	0x776f5220
 80029e4:	73615420 	.word	0x73615420
 80029e8:	0000006b 	.word	0x0000006b
 80029ec:	656e694c 	.word	0x656e694c
 80029f0:	67694820 	.word	0x67694820
 80029f4:	61542068 	.word	0x61542068
 80029f8:	00006b73 	.word	0x00006b73
 80029fc:	20726d54 	.word	0x20726d54
 8002a00:	00637653 	.word	0x00637653
 8002a04:	454c4449 	.word	0x454c4449
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	00000a0d 	.word	0x00000a0d
 8002a10:	09097325 	.word	0x09097325
 8002a14:	25096325 	.word	0x25096325
 8002a18:	75250975 	.word	0x75250975
 8002a1c:	0d752509 	.word	0x0d752509
 8002a20:	0000000a 	.word	0x0000000a

08002a24 <GPIO_PIN>:
 8002a24:	20001000 80004000                       ... .@..

08002a2c <GPIO_CLK>:
 8002a2c:	00000008 00000008 00000008 00000008     ................

08002a3c <_init>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr

08002a48 <_fini>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr
